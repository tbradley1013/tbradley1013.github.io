<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
  <title>Shiny on goonR blog</title>
  <link>/tags/shiny/</link>
  <description>Recent content in Shiny on goonR blog</description>
  <generator>Hugo -- gohugo.io</generator>
<language>en-us</language>
<lastBuildDate>Fri, 10 Aug 2018 00:00:00 +0000</lastBuildDate>

<atom:link href="/tags/shiny/index.xml" rel="self" type="application/rss+xml" />


<item>
  <title>Create a dynamic number of UI elements in Shiny with purrr</title>
  <link>/2018/08/10/create-a-dynamic-number-of-ui-elements-in-shiny-with-purrr/</link>
  <pubDate>Fri, 10 Aug 2018 00:00:00 +0000</pubDate>
  
<guid>/2018/08/10/create-a-dynamic-number-of-ui-elements-in-shiny-with-purrr/</guid>
  <description>&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://purrr.tidyverse.org/&#34;&gt;&lt;code&gt;purrr&lt;/code&gt;&lt;/a&gt; is an incredibly powerful package that has greatly enhanced my R programming abilities. &lt;code&gt;purrr&lt;/code&gt; has applications in pretty much any situation. One of the most useful situations, IMHO, is in the creation of a dynamic number of &lt;a href=&#34;https://shiny.rstudio.com/&#34;&gt;&lt;code&gt;shiny&lt;/code&gt;&lt;/a&gt; UI elements. This can be extremely useful if you want to be able to create a dynamic number of ui elements (whether that be inputs or outputs) based on either user selection or the data being used. This post will walk through how to create a dynamic number of plots depending on how many parameters the user selects.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;background&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Background&lt;/h1&gt;
&lt;p&gt;Before we get started, let’s load the libraries we will be using.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dataRetrieval)
library(tidyverse)
library(lubridate)
library(shiny)
library(shinyjs)
library(plotly)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data&lt;/h2&gt;
&lt;p&gt;In this post, I will be using the R package &lt;a href=&#34;https://github.com/USGS-R/dataRetrieval&#34;&gt;&lt;code&gt;dataRetrieval&lt;/code&gt;&lt;/a&gt; provided by the USGS to access their public API. If you wish to know more about how to use this package I would recommend checking out &lt;a href=&#34;https://cran.r-project.org/web/packages/dataRetrieval/vignettes/dataRetrieval.html&#34;&gt;the package’s vignette&lt;/a&gt;. The data used in this example app is daily water quality averages for three parameters (Temperature, Conductivity, and Dissolved Oxygen) measured in the Delaware River at the Ben Franklin Bridge in Philadelphia, PA. The code to pull the site info is placed at the top of the script outside of the ui and server code and looks like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# usgs site number of ben franklin bridge site
site &amp;lt;- &amp;quot;01467200&amp;quot;

site_info &amp;lt;- whatNWISdata(siteNumbers = site, service = &amp;quot;dv&amp;quot;, statCd = &amp;quot;00003&amp;quot;)

param_info &amp;lt;- site_info$parm_cd %&amp;gt;% unique() %&amp;gt;% readNWISpCode()


site_meta &amp;lt;- site_info %&amp;gt;% 
  select(site_no, station_nm, parm_cd) %&amp;gt;% 
  left_join(param_info %&amp;gt;% 
              select(parameter_cd, srsname, parameter_units), 
            by = c(&amp;quot;parm_cd&amp;quot; = &amp;quot;parameter_cd&amp;quot;)) %&amp;gt;% 
  # these are the parameters with data at this site 
  filter(parm_cd %in% c(&amp;quot;00010&amp;quot;, &amp;quot;00095&amp;quot;, &amp;quot;00300&amp;quot;))

param_choices &amp;lt;- site_meta$parm_cd
names(param_choices) &amp;lt;- site_meta$srsname&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The actual data is queried from the API using the &lt;code&gt;readNWISdv&lt;/code&gt; function and reformatted to be easy to graph inside an &lt;code&gt;eventReactive&lt;/code&gt; function at the top of the server code. This looks like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;wq_data &amp;lt;- eventReactive(input$submit, {
      req(input$parameter, input$date)
      
      raw_data &amp;lt;- readNWISdv(
        siteNumbers = site, 
        parameterCd = input$parameter,
        startDate = input$date[[1]],
        endDate = input$date[[2]]
      )
      
      output &amp;lt;- raw_data %&amp;gt;% 
        select(-contains(&amp;quot;_cd&amp;quot;)) %&amp;gt;% 
        gather(key = &amp;quot;parameter&amp;quot;, value = &amp;quot;result&amp;quot;, contains(&amp;quot;X_&amp;quot;)) %&amp;gt;% 
        mutate(parameter = str_replace_all(parameter, &amp;quot;X_|_00003&amp;quot;, &amp;quot;&amp;quot;)) %&amp;gt;% 
        left_join(site_meta, by = c(&amp;quot;parameter&amp;quot; = &amp;quot;parm_cd&amp;quot;, &amp;quot;site_no&amp;quot;)) 
      
      return(output)
    })&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;plotting-function&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Plotting function&lt;/h2&gt;
&lt;p&gt;Since the focus of this post is how to generate multiple plots and the data format after basic manipulation is the same for all three parameters, I have defined my plot generation as a function named &lt;code&gt;wq_plotly()&lt;/code&gt; outside of the server code. This functions looks like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;wq_plotly &amp;lt;- function(data){
  data %&amp;gt;%
    plot_ly(
      x = ~Date,
      y = ~result,
      type = &amp;quot;scatter&amp;quot;,
      mode = &amp;quot;lines+markers&amp;quot;,
      marker = list(
        size = 4,
        color = &amp;quot;blue&amp;quot;
      ),
      line = list(
        color = &amp;quot;blue&amp;quot;
      ),
      hoverinfo = &amp;quot;text&amp;quot;,
      text = ~paste(
        &amp;quot;Site:&amp;quot;, station_nm,
        &amp;quot;&amp;lt;br&amp;gt;Parameter:&amp;quot;, srsname,
        &amp;quot;&amp;lt;br&amp;gt;Date Time:&amp;quot;, format(Date),
        &amp;quot;&amp;lt;br&amp;gt;Result:&amp;quot;, result,
        &amp;quot;&amp;lt;br&amp;gt;Units:&amp;quot;, parameter_units
      )
    ) %&amp;gt;%
    layout(
      title = paste(
        unique(data$station_nm), &amp;quot;&amp;lt;br&amp;gt;&amp;quot;, 
        unique(data$srsname), 
        paste0(&amp;quot;(&amp;quot;, unique(data$parameter_units), &amp;quot;)&amp;quot;)
      ),
      titlefont = list(
        size = 10
      ),
      xaxis = list(
        title = &amp;quot;&amp;quot;
      ),
      yaxis = list(
        title = &amp;quot;&amp;quot;
      ),
      margin = list(
        t = 40
      )
    )
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;ui&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;UI&lt;/h1&gt;
&lt;p&gt;So the first part of the app is the ui code. This part is actually somewhat straightforward because all of the magic is gonna happen in our server code. We have to define our inputs for which parameters to graph (named &lt;code&gt;input$parameter&lt;/code&gt;) and the desired date range (named &lt;code&gt;input$date&lt;/code&gt;) and create an &lt;code&gt;actionButton&lt;/code&gt; so that the user controls when new graphs are generated (my personal preference). I create these all within a single &lt;code&gt;fluidRow&lt;/code&gt; with each in its own &lt;code&gt;column&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After that, I create a new &lt;code&gt;fluidRow&lt;/code&gt; and simply have a &lt;code&gt;uiOutput&lt;/code&gt; (with an id of &lt;code&gt;graphs_ui&lt;/code&gt;) in it. This &lt;code&gt;uiOutput&lt;/code&gt; will be created in our server code and contain all of the ui elements for our plots.&lt;/p&gt;
&lt;p&gt;Here is the full ui code:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ui &amp;lt;- shinyUI(
  fluidPage(
    tags$head(
      tags$style(HTML(&amp;#39;.shiny-input-container{margin-top: 20px;}&amp;#39;))
    ),
    div(
      fluidRow(
        column(
          4, 
          selectInput(
            inputId = &amp;quot;parameter&amp;quot;,
            label = &amp;quot;Select Parameter(s):&amp;quot;,
            choices = param_choices,
            multiple = TRUE
          )
        ),
        column(
          4,
          dateRangeInput(
            inputId = &amp;quot;date&amp;quot;,
            label = &amp;quot;Select Date Range:&amp;quot;,
            start = Sys.Date() - days(31),
            end = Sys.Date()
          )
        ),
        column(
          4, 
          actionButton(
            inputId = &amp;quot;submit&amp;quot;,
            label = &amp;quot;Apply Changes!&amp;quot;,
            style = &amp;quot;margin:40px;&amp;quot;
          )
        )
      ),
      fluidRow(
        div(
          id = &amp;quot;plot-container&amp;quot;,
          uiOutput(
            outputId = &amp;quot;graphs_ui&amp;quot;
          )
        )
      )
    )
  )
)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;server&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Server&lt;/h1&gt;
&lt;p&gt;Now for the fun! The first part of the server code, which was shown above, is the &lt;code&gt;wq_data&lt;/code&gt; reactive expression to query our data set. The next part involves generating a reactive object that contains a list of our graphs (a vector would work too). This is important because it is what will be used to generate the different inputs. Since I defined my graphing function above, I can call that with a combination of &lt;code&gt;dplyr::group_by&lt;/code&gt;, &lt;code&gt;tidyr::nest&lt;/code&gt;, &lt;code&gt;dplyr::mutate&lt;/code&gt;, &lt;code&gt;purrr::map&lt;/code&gt;, and &lt;code&gt;dplyr::pull&lt;/code&gt;. This combination allows us to create unique graphs for each parameter and store them in a single list. The code looks like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;graphs &amp;lt;- eventReactive(input$submit, {
  req(wq_data())
      
  wq_data() %&amp;gt;% 
    group_by(parameter) %&amp;gt;% 
    nest() %&amp;gt;% 
    mutate(
       graphs = map(data, wq_plotly) 
    ) %&amp;gt;% 
    arrange(parameter) %&amp;gt;% 
    pull(graphs)
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is important to note that I have only tested this on &lt;a href=&#34;https://plot.ly/r/&#34;&gt;&lt;code&gt;plotly&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://ggplot2.tidyverse.org/&#34;&gt;&lt;code&gt;ggplot2&lt;/code&gt;&lt;/a&gt;, and base graphics. This method only works with &lt;code&gt;plotly&lt;/code&gt; and &lt;code&gt;ggplot2&lt;/code&gt;. It does not work with base graphics because base plots cannot be saved as objects.&lt;/p&gt;
&lt;p&gt;Now that we have our list of graphs, we need to create our outputs. However, since we are giving the user the ability to choose how many parameters they want to create graphs for, &lt;em&gt;how do we know&lt;/em&gt; how many outputs to create? With &lt;code&gt;purrr&lt;/code&gt; and our list of graphs, &lt;strong&gt;we don’t need to know&lt;/strong&gt; how many outputs need to be created. By iterating over our list of graphs with &lt;code&gt;iwalk&lt;/code&gt; we can create as many outputs as there are graphs.&lt;/p&gt;
&lt;p&gt;In this case, we want to use &lt;code&gt;purrr::iwalk&lt;/code&gt; (which is a variant of &lt;code&gt;walk&lt;/code&gt;) because we want to use both the graph and its index. Using &lt;code&gt;iwalk(x, ...)&lt;/code&gt; is the same as using &lt;code&gt;walk2(x, seq_along(x), ...)&lt;/code&gt;. We use &lt;code&gt;walk&lt;/code&gt; instead of &lt;code&gt;map&lt;/code&gt; because we are not returning anything from the overall iteration, but rather only using it for its side effects. Using &lt;code&gt;walk&lt;/code&gt; instead of &lt;code&gt;map&lt;/code&gt; is similar to using an &lt;code&gt;observe&lt;/code&gt; function instead of a &lt;code&gt;reactive&lt;/code&gt; function. To further connect the comparison, we will use our &lt;code&gt;iwalk&lt;/code&gt; function inside of an &lt;code&gt;observeEvent&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;Here is what the output generation looks like:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;observeEvent(input$submit, {
  req(graphs())
      
  iwalk(graphs(), ~{
    output_name &amp;lt;- paste0(&amp;quot;plot_&amp;quot;, .y)
    output[[output_name]] &amp;lt;- renderPlotly(.x)
  })
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are two simple pieces to our &lt;code&gt;iwalk&lt;/code&gt; function. First, we define a unique &lt;code&gt;outputId&lt;/code&gt; using the index of the plot in our list. Then using that &lt;code&gt;outputId&lt;/code&gt; we can render our plotly object.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; defining an output using &lt;code&gt;output[[&amp;quot;my_output_id&amp;quot;]]&lt;/code&gt; is the same as defining it as &lt;code&gt;output$my_output_id&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Finally, the last step of the server code is to create the ui elements! Remember, in our ui code, we defined the &lt;code&gt;uiOutput&lt;/code&gt; for our graphs with an id of &lt;code&gt;graphs_ui&lt;/code&gt;. So now, we will use &lt;code&gt;renderUI&lt;/code&gt; and &lt;code&gt;purrr::imap&lt;/code&gt; to create our ui elements. Since &lt;code&gt;render*&lt;/code&gt; functions are similar to &lt;code&gt;reactive&lt;/code&gt; functions, in that they return their output, we use &lt;code&gt;imap&lt;/code&gt; rather than &lt;code&gt;iwalk&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here is what our ui generation looks like:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;output$graphs_ui &amp;lt;- renderUI({
  req(graphs())
      
  plots_list &amp;lt;- imap(graphs(), ~{
    tagList(
      plotlyOutput(
        outputId = paste0(&amp;quot;plot_&amp;quot;, .y)
      ),
      br()
    )
        
  })
      
  tagList(plots_list)
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, we use the index of our plot list again to call each individual plot &lt;code&gt;outputId&lt;/code&gt;. It is important to notice the &lt;code&gt;tagList(plots_list)&lt;/code&gt; call at the end of the &lt;code&gt;renderUI&lt;/code&gt; function. Since the output of &lt;code&gt;imap&lt;/code&gt; is a list, &lt;code&gt;plots_list&lt;/code&gt; is a list of ui elements and is not valid to be entered directly into the UI code. &lt;code&gt;tagList&lt;/code&gt; takes care of this for us and combines multiple ui elements into one.&lt;/p&gt;
&lt;p&gt;Combining all of these elements, our final shiny app looks like this:&lt;/p&gt;
&lt;center&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/images/dynamic-ui-elements/dynamic-graphs.gif&#34; /&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Being able to create a dynamic number of ui elements, whether they are inputs or outputs, is an incredibly powerful tool when trying to scale your shiny apps! The method shown here was applied to creating a dynamic number of graphs based on the users input, but it is certainly not limited to that! You can see an example of how to apply this to creating &lt;code&gt;textInput&lt;/code&gt; and &lt;code&gt;numericInput&lt;/code&gt; dynamically based on column names of an uploaded dataset in this &lt;a href=&#34;https://community.rstudio.com/t/creating-multiple-numeric-input-according-to-the-variables-of-an-uploaded-dataset/12293&#34;&gt;RStudio Community thread&lt;/a&gt;. Learning and using &lt;code&gt;purrr&lt;/code&gt; can &lt;strong&gt;&lt;em&gt;dramatically&lt;/em&gt;&lt;/strong&gt; increase your capabilities within general R programming and building shiny applications!&lt;/p&gt;
&lt;p&gt;Finally, the full code for the shiny app looks like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dataRetrieval)
library(tidyverse)
library(lubridate)
library(shiny)
library(shinyjs)
library(plotly)


# usgs site number of ben franklin bridge site
site &amp;lt;- &amp;quot;01467200&amp;quot;

site_info &amp;lt;- whatNWISdata(siteNumbers = site, service = &amp;quot;dv&amp;quot;, statCd = &amp;quot;00003&amp;quot;)

param_info &amp;lt;- site_info$parm_cd %&amp;gt;% unique() %&amp;gt;% readNWISpCode()


site_meta &amp;lt;- site_info %&amp;gt;% 
  select(site_no, station_nm, parm_cd) %&amp;gt;% 
  left_join(param_info %&amp;gt;% 
              select(parameter_cd, srsname, parameter_units), 
            by = c(&amp;quot;parm_cd&amp;quot; = &amp;quot;parameter_cd&amp;quot;)) %&amp;gt;% 
  filter(parm_cd %in% c(&amp;quot;00010&amp;quot;, &amp;quot;00095&amp;quot;, &amp;quot;00300&amp;quot;))

param_choices &amp;lt;- site_meta$parm_cd
names(param_choices) &amp;lt;- site_meta$srsname

wq_plotly &amp;lt;- function(data){
  data %&amp;gt;%
    plot_ly(
      x = ~Date,
      y = ~result,
      type = &amp;quot;scatter&amp;quot;,
      mode = &amp;quot;lines+markers&amp;quot;,
      marker = list(
        size = 4,
        color = &amp;quot;blue&amp;quot;
      ),
      line = list(
        color = &amp;quot;blue&amp;quot;
      ),
      hoverinfo = &amp;quot;text&amp;quot;,
      text = ~paste(
        &amp;quot;Site:&amp;quot;, station_nm,
        &amp;quot;&amp;lt;br&amp;gt;Parameter:&amp;quot;, srsname,
        &amp;quot;&amp;lt;br&amp;gt;Date Time:&amp;quot;, format(Date),
        &amp;quot;&amp;lt;br&amp;gt;Result:&amp;quot;, result,
        &amp;quot;&amp;lt;br&amp;gt;Units:&amp;quot;, parameter_units
      )
    ) %&amp;gt;%
    layout(
      title = paste(
        unique(data$station_nm), &amp;quot;&amp;lt;br&amp;gt;&amp;quot;, 
        unique(data$srsname), 
        paste0(&amp;quot;(&amp;quot;, unique(data$parameter_units), &amp;quot;)&amp;quot;)
      ),
      titlefont = list(
        size = 10
      ),
      xaxis = list(
        title = &amp;quot;&amp;quot;
      ),
      yaxis = list(
        title = &amp;quot;&amp;quot;
      ),
      margin = list(
        t = 40
      )
    )
}


ui &amp;lt;- shinyUI(
  fluidPage(
    tags$head(
      tags$style(HTML(&amp;#39;.shiny-input-container{margin-top: 20px;}&amp;#39;))
    ),
    div(
      fluidRow(
        column(
          4, 
          selectInput(
            inputId = &amp;quot;parameter&amp;quot;,
            label = &amp;quot;Select Parameter(s):&amp;quot;,
            choices = param_choices,
            multiple = TRUE
          )
        ),
        column(
          4,
          dateRangeInput(
            inputId = &amp;quot;date&amp;quot;,
            label = &amp;quot;Select Date Range:&amp;quot;,
            start = Sys.Date() - days(31),
            end = Sys.Date()
          )
        ),
        column(
          4, 
          actionButton(
            inputId = &amp;quot;submit&amp;quot;,
            label = &amp;quot;Apply Changes!&amp;quot;,
            style = &amp;quot;margin:40px;&amp;quot;
          )
        )
      ),
      fluidRow(
        div(
          id = &amp;quot;plot-container&amp;quot;,
          uiOutput(
            outputId = &amp;quot;graphs_ui&amp;quot;
          )
        )
      )
    )
  )
)


server &amp;lt;- shinyServer(
  function(input, output, session){
    session$onSessionEnded(stopApp)
    
    # query data from USGS API
    wq_data &amp;lt;- eventReactive(input$submit, {
      req(input$parameter, input$date)
      
      raw_data &amp;lt;- readNWISdv(
        siteNumbers = site, 
        parameterCd = input$parameter,
        startDate = input$date[[1]],
        endDate = input$date[[2]]
      )
      
      output &amp;lt;- raw_data %&amp;gt;% 
        select(-contains(&amp;quot;_cd&amp;quot;)) %&amp;gt;% 
        gather(key = &amp;quot;parameter&amp;quot;, value = &amp;quot;result&amp;quot;, contains(&amp;quot;X_&amp;quot;)) %&amp;gt;% 
        mutate(parameter = str_replace_all(parameter, &amp;quot;X_|_00003&amp;quot;, &amp;quot;&amp;quot;)) %&amp;gt;% 
        left_join(site_meta, by = c(&amp;quot;parameter&amp;quot; = &amp;quot;parm_cd&amp;quot;, &amp;quot;site_no&amp;quot;)) 
      
      return(output)
    })
    
    # create a list of graphs - with one for each parameter selected
    graphs &amp;lt;- eventReactive(input$submit, {
      req(wq_data())
      
      wq_data() %&amp;gt;% 
        group_by(parameter) %&amp;gt;% 
        nest() %&amp;gt;% 
        mutate(
          graphs = map(data, wq_plotly) 
        ) %&amp;gt;% 
        arrange(parameter) %&amp;gt;% 
        pull(graphs)
    })
    
    # use purrr::iwalk to create a dynamic number of outputs
    observeEvent(input$submit, {
      req(graphs())
      
      iwalk(graphs(), ~{
        output_name &amp;lt;- paste0(&amp;quot;plot_&amp;quot;, .y)
        output[[output_name]] &amp;lt;- renderPlotly(.x)
      })
    })
    
    # use renderUI to create a dynamic number of output ui elements
    output$graphs_ui &amp;lt;- renderUI({
      req(graphs())
      
      plots_list &amp;lt;- imap(graphs(), ~{
        tagList(
          plotlyOutput(
            outputId = paste0(&amp;quot;plot_&amp;quot;, .y)
          ),
          br()
        )
        
      })
      
      tagList(plots_list)
    })
    
  }
)


shinyApp(ui = ui, server = server)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
  </item>
  
<item>
  <title>Using global input values inside of R Shiny modules</title>
  <link>/2018/07/20/r-shiny-modules--using-global-inputs/</link>
  <pubDate>Fri, 20 Jul 2018 00:00:00 +0000</pubDate>
  
<guid>/2018/07/20/r-shiny-modules--using-global-inputs/</guid>
  <description>&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This week, I have been working on a new shiny app. This app allows for similar figures to be rendered based on which summary statistic the user is interested in. There are four different figure types for the user to choose from, each of which are placed into their own &lt;code&gt;tabPanel&lt;/code&gt;. This means copying the server code used to generate the graphs four different times. Following Hadley’s words of wisdom in &lt;a href=&#34;http://r4ds.had.co.nz/functions.html&#34;&gt;R for Data Science&lt;/a&gt;, I wanted to abstract this process into functions. In the world of &lt;a href=&#34;https://shiny.rstudio.com/&#34;&gt;shiny&lt;/a&gt;, this means working with &lt;a href=&#34;https://shiny.rstudio.com/articles/modules.html&#34;&gt;modules&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I have worked with modules before, but each time I have, the modules have been more overarching (i.e. they were large components of the app that did not share inputs) and I did not use them to repeat a similar process but simply to split up the code of a large app. In this case, I want the user to be able to select their inputs and click a submit button which will result in all of the graphs being updated. Then they will be able to switch between the &lt;code&gt;tabPanel&lt;/code&gt;s without having to click any additional buttons or re-select any inputs. This desired functionality requires using the same &lt;code&gt;actionButton&lt;/code&gt; and the same data set for multiple modules. However, I found out it isn’t as easy as I expected for global inputs to be used within modules!&lt;/p&gt;
&lt;p&gt;To illustrate my issue, I have put together a super simple app that has an action button and returns the count of the number of times it has been pressed. This count is output twice, one of the counts represents the count output being rendered outside of a module and then other shows the count output being rendered inside of a module. In addition, the module code returns a text output stating whether the count is odd or even. This demonstrates how this issue impacts &lt;code&gt;eventReactive&lt;/code&gt; functions.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;attempt-no.-1&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Attempt No. 1&lt;/h1&gt;
&lt;p&gt;On my first attempt, I simply abstracted my code so that the module would accept a &lt;code&gt;reactive&lt;/code&gt; data set and simply passed my &lt;code&gt;actionButton&lt;/code&gt; input (&lt;code&gt;input$submit&lt;/code&gt; - creative, I know) straight into the module code. In my simplified app, I did something similar (just without the data set) and it looked like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(shiny)

# attempt #1
count_module_ui &amp;lt;- function(id){
  ns &amp;lt;- NS(id)
  
  tagList(
    h4(&amp;quot;Modulized Count&amp;quot;),
    textOutput(ns(&amp;quot;count_inside&amp;quot;)),
    h4(&amp;quot;Is Modulized Count Odd or Even?&amp;quot;),
    textOutput(ns(&amp;quot;odd_even&amp;quot;))
  )
}

count_module &amp;lt;- function(input, output, session){
  
  output$count_inside &amp;lt;- renderText(as.character(input$submit))
  
  temp_text &amp;lt;- eventReactive(input$submit, {
    if (action() %% 2 == 0) {
      return(&amp;quot;even&amp;quot;)
    } else{
      return(&amp;quot;odd&amp;quot;)
    }
  })
  
  output$odd_even &amp;lt;- renderText(temp_text())
}

ui &amp;lt;- fluidPage(
  actionButton(
    &amp;quot;submit&amp;quot;, 
    &amp;quot;Press me&amp;quot;
  ),
  h4(&amp;quot;Count Regular&amp;quot;),
  textOutput(&amp;quot;count&amp;quot;),
  count_module_ui(&amp;quot;count_module&amp;quot;)
)

server &amp;lt;- function(input, output, session) {
  session$onSessionEnded(stopApp)
  output$count &amp;lt;- renderText(as.character(input$submit))
  callModule(count_module, &amp;quot;count_module&amp;quot;)
}

shinyApp(ui = ui, server = server)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I thought for sure this would work. After all, in normal R functions, if a variable is not defined in function’s local environment, it looks for it in its parent environment. I assumed, incorrectly, that modules would behave in a similar way, and since there is no &lt;code&gt;input$submit&lt;/code&gt; defined in the module code, it would look to its parent environment for it. However, when I run this app, only the &lt;code&gt;h4()&lt;/code&gt; portions of the module ui are there, no matter how many times I press the button!&lt;/p&gt;
&lt;center&gt;
&lt;img src=&#34;/images/modules-action-button/attempt-1.gif&#34; alt=&#34;My first attempt&#34; /&gt;
&lt;/center&gt;
&lt;/div&gt;
&lt;div id=&#34;attempt-no.-2&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Attempt No. 2&lt;/h1&gt;
&lt;p&gt;It turns out that modules only recognize &lt;code&gt;input&lt;/code&gt; and &lt;code&gt;output&lt;/code&gt; objects that are explicitly defined in the module or passed as an argument to the module. So I then decided to try making the &lt;code&gt;input$submit&lt;/code&gt; object an argument in the module code. It looked like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(shiny)

# attempt 2
count_module_ui &amp;lt;- function(id){
  ns &amp;lt;- NS(id)
  
  tagList(
    h4(&amp;quot;Modulized Count&amp;quot;),
    textOutput(ns(&amp;quot;count_inside&amp;quot;)),
    h4(&amp;quot;Is Modulized Count Odd or Even?&amp;quot;),
    textOutput(ns(&amp;quot;odd_even&amp;quot;))
  )
}

count_module &amp;lt;- function(input, output, session, action){
  
  output$count_inside &amp;lt;- renderText(as.character(action))
  
  temp_text &amp;lt;- eventReactive(action, {
    if (action() %% 2 == 0) {
      return(&amp;quot;even&amp;quot;)
    } else{
      return(&amp;quot;odd&amp;quot;)
    }
  })
  
  output$odd_even &amp;lt;- renderText(temp_text())
}

ui &amp;lt;- fluidPage(
  actionButton(
    &amp;quot;submit&amp;quot;, 
    &amp;quot;Press me&amp;quot;
  ),
  h4(&amp;quot;Count Regular&amp;quot;),
  textOutput(&amp;quot;count&amp;quot;),
  count_module_ui(&amp;quot;count_module&amp;quot;)
)

server &amp;lt;- function(input, output, session) {
  session$onSessionEnded(stopApp)
  output$count &amp;lt;- renderText(as.character(input$submit))
  callModule(count_module, &amp;quot;count_module&amp;quot;, action = input$submit)
}

shinyApp(ui = ui, server = server)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that now there is an extra argument in my &lt;code&gt;count_module&lt;/code&gt; server function that I pass &lt;code&gt;input$submit&lt;/code&gt; to in my &lt;code&gt;server&lt;/code&gt; code.&lt;/p&gt;
&lt;p&gt;When I loaded the app, I thought for sure I had gotten it to work because now the modulized count shows up as zero when the app loads. Unfortunately, that hope faded fairly quick when I pressed the action button and my non-modulized count increased and my modulized count stayed at zero…&lt;/p&gt;
&lt;center&gt;
&lt;img src=&#34;/images/modules-action-button/attempt-2.gif&#34; alt=&#34;My second attempt&#34; /&gt;
&lt;/center&gt;
&lt;/div&gt;
&lt;div id=&#34;attempt-no.-3-success&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Attempt No. 3 (Success!)&lt;/h1&gt;
&lt;p&gt;Finally, I realized, thanks to &lt;a href=&#34;https://stackoverflow.com/questions/45169876/observeevent-shiny-function-used-in-a-module-does-not-work&#34;&gt;this StackOverflow answer&lt;/a&gt;, that I had to pass the &lt;code&gt;input$submit&lt;/code&gt; to the module as a &lt;em&gt;reactive&lt;/em&gt;. This wasn’t clear to me at first, since inputs are typically treated as dynamic elements. So to correct for this, I created a separate reactive element in my server code, &lt;code&gt;count_value&lt;/code&gt;. This is simply the value of &lt;code&gt;input$submit&lt;/code&gt;. I then passed this reactive element to my module. Here is the updated code:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(shiny)

# attempt 3
count_module_ui &amp;lt;- function(id){
  ns &amp;lt;- NS(id)
  
  tagList(
    h4(&amp;quot;Modulized Count&amp;quot;),
    textOutput(ns(&amp;quot;count_inside&amp;quot;)),
    h4(&amp;quot;Is Modulized Count Odd or Even?&amp;quot;),
    textOutput(ns(&amp;quot;odd_even&amp;quot;))
  )
}

count_module &amp;lt;- function(input, output, session, action){
  
  output$count_inside &amp;lt;- renderText(as.character(action()))
  
  temp_text &amp;lt;- eventReactive(action(), {
    if (action() %% 2 == 0) {
      return(&amp;quot;even&amp;quot;)
    } else{
      return(&amp;quot;odd&amp;quot;)
    }
  })
  
  output$odd_even &amp;lt;- renderText(temp_text())
}

ui &amp;lt;- fluidPage(
  actionButton(
    &amp;quot;submit&amp;quot;, 
    &amp;quot;Press me&amp;quot;
  ),
  h4(&amp;quot;Count Regular&amp;quot;),
  textOutput(&amp;quot;count&amp;quot;),
  count_module_ui(&amp;quot;count_module&amp;quot;)
)


server &amp;lt;- function(input, output, session) {
  session$onSessionEnded(stopApp)
  output$count &amp;lt;- renderText(as.character(input$submit))
  count_value &amp;lt;- reactive(input$submit)
  callModule(count_module, &amp;quot;count_module&amp;quot;, action = count_value)
}

shinyApp(ui = ui, server = server)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;At last, Success!!&lt;/strong&gt;&lt;/p&gt;
&lt;center&gt;
&lt;img src=&#34;/images/modules-action-button/attempt-3.gif&#34; alt=&#34;At last, success!!&#34; /&gt;
&lt;/center&gt;
&lt;p&gt;Notice that in addition to adding the &lt;code&gt;count_value&lt;/code&gt; reactive expression to my server code, I also passed this value to the module with out the normal &lt;code&gt;()&lt;/code&gt; at the end of a reactive call. That is because the &lt;code&gt;()&lt;/code&gt; at the end of this value is then passed to &lt;code&gt;action&lt;/code&gt; &lt;em&gt;in&lt;/em&gt; the module server code. So instead of &lt;code&gt;action = count_value()&lt;/code&gt; in the &lt;code&gt;callModule&lt;/code&gt; function, you pass &lt;code&gt;action = count_value&lt;/code&gt; to &lt;code&gt;callModule&lt;/code&gt; and then inside of the &lt;code&gt;count_module&lt;/code&gt; function you call &lt;code&gt;action()&lt;/code&gt; instead of &lt;code&gt;action&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Using modules can be an extremely useful tool for both breaking up large apps but also when trying to avoid repetition in your server code. However, abstracting your shiny code to modules it not always as straight forward as abstracting your code to functions (not that that is always straightforward, either!). This post demonstrates a useful trick when you don’t want to create repetitive &lt;code&gt;actionButton&lt;/code&gt; input types (or any input for that matter) for each module but rather want modules to share input values!&lt;/p&gt;
&lt;/div&gt;
</description>
  </item>
  
</channel>
  </rss>