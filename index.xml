<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
  <title>goonR blog</title>
  <link>/</link>
  <description>Recent content on goonR blog</description>
  <generator>Hugo -- gohugo.io</generator>
<language>en-us</language>
<lastBuildDate>Thu, 02 Jan 2020 00:00:00 +0000</lastBuildDate>

<atom:link href="/index.xml" rel="self" type="application/rss+xml" />


<item>
  <title>Analyzing My 2019 GitHub Usage in R</title>
  <link>/2020/01/02/analyzing-my-2019-github-usage-in-r/</link>
  <pubDate>Thu, 02 Jan 2020 00:00:00 +0000</pubDate>
  
<guid>/2020/01/02/analyzing-my-2019-github-usage-in-r/</guid>
  <description>&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;If you are anything like me, then you probably enjoy the contribution graphs that GitHub posts to both your own and others GitHub profile. You can see mine &lt;a href=&#34;https://github.com/tbradley1013&#34;&gt;here&lt;/a&gt;. Since it is the beginning of a new year, I thought it would be fun to take a look back to see how I used GitHub in 2019 and in previous years. This is made much easier by using the &lt;a href=&#34;https://github.com/r-lib/gh&#34;&gt;&lt;code&gt;gh&lt;/code&gt;&lt;/a&gt; R package which provides an R interface to the &lt;a href=&#34;https://developer.github.com/v3/&#34;&gt;GitHub API&lt;/a&gt;. This post will walk through how to get all of the commits for your personal repos (so your results will look different from mine). The &lt;code&gt;gh&lt;/code&gt; package will use the &lt;code&gt;GITHUB_PAT&lt;/code&gt; environment variable to access any personal access token you have previously set up. If you do not have that configured, than you can provide your token with the &lt;code&gt;.token&lt;/code&gt; argument.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(gh)
library(lubridate)
library(glue)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will also define a custom color palette based on the &lt;a href=&#34;https://primer.style/css/utilities/colors&#34;&gt;GitHub Style Guide&lt;/a&gt; to stick with the post’s theme.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gh_pal &amp;lt;- c(blue = &amp;quot;#0366d6&amp;quot;, yellow = &amp;quot;#ffd33d&amp;quot;, red = &amp;quot;#d73a49&amp;quot;, green = &amp;quot;#28a745&amp;quot;, purple = &amp;quot;#6f42c1&amp;quot;, light_green = &amp;quot;#dcffe4&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;getting-repos&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Getting Repos&lt;/h1&gt;
&lt;p&gt;First, we want to get a listing of all of the repos that are associated with my GitHub account. We can do this using the &lt;code&gt;/user/repos&lt;/code&gt; API endpoint.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;repos &amp;lt;- gh(&amp;quot;/user/repos&amp;quot;, .limit = Inf)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can extract the desired information from the &lt;code&gt;repos&lt;/code&gt; using the &lt;code&gt;map_chr&lt;/code&gt; and &lt;code&gt;map_lgl&lt;/code&gt; functions in the &lt;code&gt;purrr&lt;/code&gt; package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;repo_info &amp;lt;- tibble(
  owner = map_chr(repos, c(&amp;quot;owner&amp;quot;, &amp;quot;login&amp;quot;)),
  name = map_chr(repos, &amp;quot;name&amp;quot;),
  full_name = map_chr(repos, &amp;quot;full_name&amp;quot;),
  private = map_lgl(repos, &amp;quot;private&amp;quot;)
)

# showing the first few non-private repos
filter(repo_info, !private)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 35 x 4
##    owner      name                  full_name                       private
##    &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;                 &amp;lt;chr&amp;gt;                           &amp;lt;lgl&amp;gt;  
##  1 saleslab   DWC                   saleslab/DWC                    FALSE  
##  2 saleslab   ParsingLabSolutionsA… saleslab/ParsingLabSolutionsAS… FALSE  
##  3 tbradley1… adv-r                 tbradley1013/adv-r              FALSE  
##  4 tbradley1… aob-power             tbradley1013/aob-power          FALSE  
##  5 tbradley1… blog                  tbradley1013/blog               FALSE  
##  6 tbradley1… connectapi            tbradley1013/connectapi         FALSE  
##  7 tbradley1… critical-thinking-ev… tbradley1013/critical-thinking… FALSE  
##  8 tbradley1… dbp-calculator        tbradley1013/dbp-calculator     FALSE  
##  9 tbradley1… dragondown            tbradley1013/dragondown         FALSE  
## 10 tbradley1… dragondown_book       tbradley1013/dragondown_book    FALSE  
## # … with 25 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is a lot of other information contained within the &lt;code&gt;repos&lt;/code&gt; API response. However, since I will be focusing mainly on my commits, I don’t need most of it for this purpose.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;get-and-parse-commits&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Get and Parse Commits&lt;/h1&gt;
&lt;p&gt;In order to get all of the commits for each of these repos, we will use the &lt;code&gt;map_dfr&lt;/code&gt; to append all of the commit information for each repo into a single dataset. Before we do that, we need to define a few helper functions that can parse the output of the API endpoint response.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;null_list &amp;lt;- function(x){
  map_chr(x, ~{ifelse(is.null(.x), NA, .x)})
}

parse_commit &amp;lt;- function(commits, repo){
  # browser()
  commit_by &amp;lt;- map(commits, c(&amp;quot;commit&amp;quot;, &amp;quot;author&amp;quot;, &amp;quot;name&amp;quot;))
  username &amp;lt;- map(commits, c(&amp;quot;committer&amp;quot;, &amp;quot;login&amp;quot;))
  commit_time &amp;lt;- map(commits, c(&amp;quot;commit&amp;quot;, &amp;quot;author&amp;quot;, &amp;quot;date&amp;quot;))
  message &amp;lt;- map(commits, c(&amp;quot;commit&amp;quot;, &amp;quot;message&amp;quot;))
  
  out &amp;lt;- tibble(
    repo = repo,
    commit_by = null_list(commit_by),
    username = null_list(username),
    commit_time = null_list(commit_time),
    message = null_list(message)
  )
  
  out &amp;lt;- mutate(out, commit_time = as.POSIXct(commit_time, format = &amp;quot;%Y-%m-%dT%H:%M:%SZ&amp;quot;))
  return(out)
}

gh_safe &amp;lt;- purrr::possibly(gh, otherwise = NULL)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;parse_commit&lt;/code&gt; function will extract the desired information from each API response. The &lt;code&gt;null_list&lt;/code&gt; function is a simple helper to convert any NULL values in the response to NA, so that the &lt;code&gt;map&lt;/code&gt; functions don’t throw errors. Finally, the &lt;code&gt;gh_safe&lt;/code&gt; function is a safe version of the &lt;code&gt;gh&lt;/code&gt; function. This is defined in case any of the individual responses fail, it doesn’t cause the entire loop to fail.&lt;/p&gt;
&lt;p&gt;Now we can query all of the commits from each of these repos and filter the output to include only commits that I made.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;all_commits &amp;lt;- map_dfr(repo_info$full_name, function(z){
  name_split &amp;lt;- str_split(z, &amp;quot;/&amp;quot;)
  owner &amp;lt;- name_split[[1]][1]
  repo &amp;lt;- name_split[[1]][2]
  
  repo_commits &amp;lt;- gh_safe(&amp;quot;/repos/:owner/:repo/commits&amp;quot;, owner = owner, 
                          repo = repo, author = &amp;quot;tbradley1013&amp;quot;,
                          since = &amp;quot;2017-01-01T00:00:00Z&amp;quot;,
                          until = &amp;quot;2020-01-01T00:00:00Z&amp;quot;,
                          .limit = Inf)
  
  out &amp;lt;- parse_commit(repo_commits, repo = z)
  
  return(out)
})


my_commits &amp;lt;- all_commits %&amp;gt;% 
  filter(commit_by == &amp;quot;Tyler Bradley&amp;quot;) %&amp;gt;% 
  mutate(commit_time = commit_time - hours(5))

my_commits&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3,549 x 5
##    repo     commit_by  username  commit_time         message               
##    &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;     &amp;lt;dttm&amp;gt;              &amp;lt;chr&amp;gt;                 
##  1 nmanna/… Tyler Bra… tbradley… 2019-10-25 07:16:50 rendering changes     
##  2 nmanna/… Tyler Bra… tbradley… 2019-10-25 07:08:12 Merge branch &amp;#39;master&amp;#39;…
##  3 nmanna/… Tyler Bra… tbradley… 2019-10-25 07:08:03 changes from rendering
##  4 nmanna/… Tyler Bra… tbradley… 2019-10-25 07:07:23 force style change    
##  5 nmanna/… Tyler Bra… tbradley… 2019-10-25 06:45:06 adding public back to…
##  6 nmanna/… Tyler Bra… tbradley… 2019-10-25 06:44:44 removing public       
##  7 nmanna/… Tyler Bra… tbradley… 2019-10-25 06:37:32 Merge branch &amp;#39;master&amp;#39;…
##  8 nmanna/… Tyler Bra… tbradley… 2019-10-25 06:37:12 rendered on server    
##  9 nmanna/… Tyler Bra… tbradley… 2019-10-25 06:35:46 removed public        
## 10 nmanna/… Tyler Bra… tbradley… 2019-10-25 06:33:36 added post for settin…
## # … with 3,539 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;analyzing-the-results&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Analyzing the results&lt;/h1&gt;
&lt;p&gt;First, we can look at the overall number of commits I have made per year since I started using GitHub in 2017. Before we do that, we will add a few columns to the &lt;code&gt;my_commits&lt;/code&gt; dataset to include grouping variables based on the commit date and time. We will also join the &lt;code&gt;repo_info&lt;/code&gt; dataset to the &lt;code&gt;my_commits&lt;/code&gt; dataset.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_commits &amp;lt;- my_commits %&amp;gt;% 
  mutate(
    date = date(commit_time),
    wday = wday(date, label = TRUE),
    year = year(date),
    week = week(date)
  ) %&amp;gt;% 
  left_join(
    repo_info, 
    by = c(&amp;quot;repo&amp;quot; = &amp;quot;full_name&amp;quot;)
  ) &lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_commits %&amp;gt;% 
  count(year) %&amp;gt;% 
  ggplot(aes(as.character(year), n)) + 
  geom_col(fill = gh_pal[&amp;quot;green&amp;quot;]) + 
  geom_text(aes(y = (n-35), label = paste(n, &amp;quot;commits&amp;quot;)), color = &amp;quot;white&amp;quot;, fontface = &amp;quot;bold&amp;quot;) + 
  theme_bw() + 
  scale_y_continuous(expand = c(0, 0), limits = c(0, 2050)) + 
  scale_x_discrete(expand = c(0.17, 0.17)) + 
  labs(
    title = &amp;quot;Commits by Tyler Bradley (tbradley1013) since joining GitHub by Year&amp;quot;,
    y = &amp;quot;Number of Commits&amp;quot;
  ) + 
  theme(
    axis.title.x = element_blank(),
    panel.grid.minor.x = element_blank()
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-01-02-analyzing-my-2019-github-usage-in-r_files/figure-html/commits-per-year-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can see that I have used GitHub more and more over the last three years, with my highest number of commits coming in 2019 (n = 1988). The same trend is true when looking at my commits to public and private repos.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_commits  %&amp;gt;% 
  count(year, private) %&amp;gt;% 
  mutate(private = ifelse(private, &amp;quot;Private&amp;quot;, &amp;quot;Public&amp;quot;),
         year = factor(year, levels = unique(year)),
         text_x = ifelse(private == &amp;quot;Private&amp;quot;, as.numeric(year) - 0.22, as.numeric(year) + 0.22)) %&amp;gt;% 
  ggplot(aes(year, n, fill = private)) + 
  geom_col(position = &amp;quot;dodge&amp;quot;) + 
  geom_text(aes(text_x, n-20, label = paste(n, &amp;quot;commits&amp;quot;)), color = &amp;quot;white&amp;quot;, fontface = &amp;quot;bold&amp;quot;) +
  theme_bw() + 
  # ggsci::scale_f
  scale_fill_manual(values = c(unname(gh_pal[&amp;quot;blue&amp;quot;]), unname(gh_pal[&amp;quot;green&amp;quot;]))) + 
  scale_y_continuous(expand = c(0, 0), limits = c(0, 1550)) + 
  scale_x_discrete(expand = c(0.17, 0.17)) +
  labs(
    title = &amp;quot;Number of GitHub Commits by Tyler Bradley (tbradley1013) to Public and Private Repos by Year&amp;quot;,
    y = &amp;quot;Number of Commits&amp;quot;
  ) + 
  theme(
    axis.title.x = element_blank(),
    legend.title = element_blank()
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-01-02-analyzing-my-2019-github-usage-in-r_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can also use &lt;code&gt;ggplot2&lt;/code&gt; to recreate the GitHub contribution heatmap. There is a minor bit of hacking to get the axes in the desired format showing the start to the month, but it can be done like this.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_commits %&amp;gt;% 
  count(date, wday, year, week) %&amp;gt;% 
  mutate(
    week = factor(week),
    wday = fct_rev(wday)
  ) %&amp;gt;% 
  group_by(year, week) %&amp;gt;% 
  mutate(
    min_date = floor_date(date, &amp;quot;week&amp;quot;), 
    min_date = if_else(
      year(min_date) &amp;lt; year, 
      as.Date(str_replace(min_date, as.character(year-1), &amp;quot;1998&amp;quot;)),
      as.Date(str_replace(min_date, as.character(year), &amp;quot;1999&amp;quot;))
    )
    
  ) %&amp;gt;% 
  ungroup() %&amp;gt;% 
  ggplot(aes(min_date, wday, fill = n)) + 
  facet_wrap(~year, ncol = 1) +
  geom_tile(width = 5, height = 0.9, color = &amp;quot;black&amp;quot;) + 
  theme_bw() + 
  scale_y_discrete(expand = c(0,0)) + 
  scale_x_date(date_breaks = &amp;quot;1 month&amp;quot;, date_labels = &amp;quot;%b&amp;quot;, expand = c(0, 0)) +
  labs(
    title = &amp;quot;Tyler Bradley&amp;#39;s (tbradley1013) GitHub contributions heat map by year&amp;quot;
  ) +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    axis.title = element_blank(),
    legend.title = element_blank()
  ) + 
  scale_fill_gradient(low = gh_pal[&amp;quot;light_green&amp;quot;], high = gh_pal[&amp;quot;green&amp;quot;])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-01-02-analyzing-my-2019-github-usage-in-r_files/figure-html/contributions-heat-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now we can look just at the last year and see when I am the most productive according to commits. We can group the commits by the day of the week and the time of day to see if any patterns can be seen.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_commits %&amp;gt;% 
  filter(year == 2019) %&amp;gt;% 
  mutate(
    hour = hour(commit_time)
  ) %&amp;gt;% 
  count(hour) %&amp;gt;% 
  mutate(
    text_y = ifelse(n &amp;lt; 50, n+5, n-5),
    text_color = ifelse(n &amp;lt; 50, &amp;quot;black&amp;quot;, &amp;quot;white&amp;quot;)
  ) %&amp;gt;% 
  ggplot(aes(hour, n)) + 
  geom_col(fill = gh_pal[&amp;quot;green&amp;quot;]) + 
  geom_text(aes(y = text_y, color = text_color, label = paste(&amp;quot;n =&amp;quot;, n)), show.legend = FALSE, size = 3) + 
  theme_bw() + 
  scale_x_continuous(breaks = seq(0, 23, 2), labels = seq(0, 23, 2)) +
  scale_y_continuous(expand = c(0, 0), limits = c(0, 310)) +
  scale_color_manual(values = c(&amp;quot;black&amp;quot;, &amp;quot;white&amp;quot;)) + 
  labs(
    title = &amp;quot;Commits by Tyler Bradley (tbradley1013) in 2019 by time of day&amp;quot;,
    y = &amp;quot;Number of Commits&amp;quot;,
    x = &amp;quot;Time of Day (Hour)&amp;quot;
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-01-02-analyzing-my-2019-github-usage-in-r_files/figure-html/commits-by-hour-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;My most productive time periods are clearly between 9 am and 2 pm. Over the course of that time it appears that I am fairly consistent in my productivity. This period of productivity corresponds to the time when I am in the office at work. The time periods right outside of that window (7am-8am and 3pm-4pm) are typically the beginning and end of my work day so I am either getting my day started or wrapping things up at that point. It is clear from this figure that I don’t tend to do any work from 10pm-5am which conforms as expected with my sleep schedule.&lt;/p&gt;
&lt;p&gt;Similarly, my commits by day of the week conforms with an expected pattern that my most productive periods are when I am at work in the office Monday-Friday.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_commits %&amp;gt;% 
  filter(year == 2019) %&amp;gt;% 
  count(wday) %&amp;gt;% 
  ggplot(aes(wday, n)) + 
  geom_col(fill = gh_pal[&amp;quot;green&amp;quot;]) + 
  geom_text(aes(y = n-10, label = paste(&amp;quot;n =&amp;quot;, n)), color = &amp;quot;white&amp;quot;, show.legend = FALSE) + 
  theme_bw() +
  scale_y_continuous(expand = c(0, 0), limits = c(0, 475)) +
  scale_color_manual(values = c(&amp;quot;black&amp;quot;, &amp;quot;white&amp;quot;)) + 
  labs(
    title = &amp;quot;Commits by Tyler Bradley (tbradley1013) in 2019 by day of the week&amp;quot;,
    y = &amp;quot;Number of Commits&amp;quot;,
    x = &amp;quot;Day of the week&amp;quot;
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-01-02-analyzing-my-2019-github-usage-in-r_files/figure-html/commits-by-wday-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Overall, 2019 was a very productive year for me in terms of GitHub commits! At this point, I am very committed to the git/GitHub workflow and expect that my commits will continue to either follow an upward trend or reach a plateau as I continue to take on new and exciting projects at work and in school!&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;gh&lt;/code&gt; package allows R users to easily interact with the GitHub API and analyze how they are utilizing the tools available through GitHub.&lt;/p&gt;
&lt;/div&gt;
</description>
  </item>
  
<item>
  <title>dragondown: A bookdown template for writing your thesis/dissertation at Drexel University in R</title>
  <link>/2019/07/13/dragondown-thesis-dissertation-template-drexel-university/</link>
  <pubDate>Sat, 13 Jul 2019 00:00:00 +0000</pubDate>
  
<guid>/2019/07/13/dragondown-thesis-dissertation-template-drexel-university/</guid>
  <description>

&lt;p&gt;I am happy to introduce the &lt;a href=&#34;https://github.com/tbradley1013/dragondown&#34;&gt;&lt;code&gt;dragondown&lt;/code&gt;&lt;/a&gt; R package. This package will allow for you to write your Drexel University Master&amp;rsquo;s or PhD Thesis/Dissertation entirely in Rmarkdown without having to write it in LaTeX. This package is inspired by the &lt;a href=&#34;https://github.com/ismayc/thesisdown&#34;&gt;&lt;code&gt;thesisdown&lt;/code&gt;&lt;/a&gt; package.&lt;/p&gt;

&lt;h2 id=&#34;how-it-works&#34;&gt;How it works&lt;/h2&gt;

&lt;p&gt;Using &lt;code&gt;dragondown&lt;/code&gt; is fairly straightforward. &lt;code&gt;dragondown&lt;/code&gt; (along with other Rmarkdown projects) are typically best when done in RStudio, so your first step is to install RStudio and R. You can find the latest version of R &lt;a href=&#34;https://www.r-project.org/&#34;&gt;here&lt;/a&gt; and RStudio &lt;a href=&#34;https://www.rstudio.com/products/rstudio/download/&#34;&gt;here&lt;/a&gt;. Once you have R and RStudio installed, you will need to install a LaTeX distribution. Luckily for you, Yihui Xie has created the &lt;a href=&#34;https://yihui.name/tinytex/&#34;&gt;&lt;code&gt;tinytex&lt;/code&gt;&lt;/a&gt; distribution which can be easily installed for using with R. You can install it as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;install.packages(&#39;tinytex&#39;)
tinytex::install_tinytex()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you have these prerequisites installed, you can now install the &lt;code&gt;bookdown&lt;/code&gt; and the &lt;code&gt;dragondown&lt;/code&gt; packages from GitHub. You can do this with the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (!require(&amp;quot;remotes&amp;quot;)) install.packages(&amp;quot;remotes&amp;quot;, repos = &amp;quot;http://cran.rstudio.org&amp;quot;)
remotes::install_github(&amp;quot;rstudio/bookdown&amp;quot;)
remotes::install_github(&amp;quot;tbradley1013/dragondown&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can create a thesis project easily from RStudio. Select &lt;code&gt;File -&amp;gt; New File -&amp;gt; R Markdown&lt;/code&gt; from the menu. When the pop-up opens, select &amp;ldquo;From Template&amp;rdquo; from the left hand side and then find the &amp;ldquo;Drexel Thesis&amp;rdquo; option from the list, as shown here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/dragondown/thesis_rmd.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Please note, that your must use the name &amp;ldquo;index&amp;rdquo; so that your &lt;code&gt;index.Rmd&lt;/code&gt; file is created correctly. One you select &amp;ldquo;OK&amp;rdquo;, a new folder (also named index) will be created wherever you specify in the Location input. All of the template files will be created within the index folder that is created. Note that once the folder is created, you can rename the folder, as long as you do not rename the &lt;code&gt;index.Rmd&lt;/code&gt; file within the folder.&lt;/p&gt;

&lt;p&gt;Now you are ready to get to work! You create a new Rmarkdown document for each chapter within your dissertation as shown in the example files that are generated when you create the project. If you add more chapters, or rename the existing ones, you will have to update your &lt;code&gt;_bookdown.yml&lt;/code&gt; file to indicate the correct order for your files.&lt;/p&gt;

&lt;p&gt;Whenever you want to see what your current work looks like in the final format, you can open your &lt;code&gt;index.Rmd&lt;/code&gt; file and select the &amp;ldquo;Knit&amp;rdquo; option at the top of the script. This will create the book from all of the files listed in the &lt;code&gt;_bookdown.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;I recommend you look through some of the example chapters, as they demonstrate some of the capabilities of using &lt;code&gt;bookdown&lt;/code&gt; to write your thesis. You can also see more functionality of the &lt;code&gt;bookdown&lt;/code&gt; package &lt;a href=&#34;https://bookdown.org/&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see how other components of the &lt;code&gt;dragondown&lt;/code&gt; template works by reading through the &lt;a href=&#34;https://github.com/tbradley1013/dragondown#components&#34;&gt;Components&lt;/a&gt; section of the GitHub README. You can see what the final product of the &lt;code&gt;dragondown&lt;/code&gt; project looks like for the example thesis used in the template looks like &lt;a href=&#34;/dragondown_book/thesis.pdf&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;thesis-dissertation-approval-form&#34;&gt;Thesis/Dissertation Approval Form&lt;/h3&gt;

&lt;p&gt;One important feature unique to the &lt;code&gt;dragondown&lt;/code&gt; template, is the ability to include the required &lt;a href=&#34;https://drexel.edu/~/media/Files/graduatecollege/forms/Graduate%20Thesis-Dissertation%20Approval%20Form%20and%20Signature%20Page.ashx?la=en&#34;&gt;thesis/dissertation approval form&lt;/a&gt;. This form is for your committee members to sign that they have approved of your thesis. In the original &lt;code&gt;drexel-thesis&lt;/code&gt; LaTeX class, this page was created in pure LaTeX. However, the form as been updated since its implementation and unfortunately, I am not a LaTeX expert. So in this project, the approval form is added using a saved version of the form from the &lt;code&gt;docs&lt;/code&gt; folder of your thesis project. When you create a new thesis project, a blank approval form is used. However, you can replace the existing form with a filled out form if you wish. If you decide to do this, you can use the existing file name or you can specify a new name. Please note, that if you use a different file name, you will need to specify the file location in your &lt;code&gt;index.Rmd&lt;/code&gt; file using the &lt;code&gt;approvalform&lt;/code&gt; YAML parameter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;approvalform: path/to/form.pdf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you wish to exlude the approval form from your thesis rendering, you will need to open the &lt;code&gt;template.tex&lt;/code&gt; file and remove the &lt;code&gt;approvalform&lt;/code&gt; option from the &lt;code&gt;\documentclass&lt;/code&gt; option on the first line.&lt;/p&gt;

&lt;h2 id=&#34;why-should-you-use-dragondown&#34;&gt;Why should you use &lt;code&gt;dragondown&lt;/code&gt;?&lt;/h2&gt;

&lt;p&gt;Writing your thesis/dissertation is hard enough, and worrying about the formatting and how to integrate your results with your text can make it that much more difficult. Inspired by other examples, the &lt;code&gt;dragondown&lt;/code&gt; package will allow you to create a Rmarkdown book that conforms to the requirements given in the &lt;a href=&#34;https://drexel.edu/~/media/Files/graduatecollege/forms/Thesis%20Manual.ashx?la=en&#34;&gt;Drexel Thesis Manual&lt;/a&gt;. There are three main reasons why you should want to use this package to create your thesis/dissertation:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Easily integrate your text with your analyses&lt;/li&gt;
&lt;li&gt;Avoid having to work in raw LaTeX to include tables and figures in a clean format&lt;/li&gt;
&lt;li&gt;REPRODUCIBILITY!!
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;1-easily-integrate-your-text-with-your-analyses&#34;&gt;1. Easily integrate your text with your analyses.&lt;/h3&gt;

&lt;p&gt;R and Rmarkdown allows you to easily integrate text and your analyses (in the form of R, python, or SQL code). The &lt;code&gt;dragondown&lt;/code&gt; package then provides the required templates so that when your knit your Rmarkdown (in this case a &lt;a href=&#34;https://bookdown.org/&#34;&gt;&lt;code&gt;bookdown&lt;/code&gt;&lt;/a&gt;) project it will conform to Drexel&amp;rsquo;s various requirements for the formatting of a thesis/dissertation. This is incredibly powerful, and can save you a lot of time when you are trying to put the finishing touches on your project. Instead of having to spend a crazy amount of time making sure that every figure and table meets the right requirements and your front matter and back matter all meet the requirements, the &lt;code&gt;dragondwon&lt;/code&gt; package takes care of that for you. This will allow you to spend your time on what you really care about, your work!&lt;/p&gt;

&lt;p&gt;For example, let&amp;rsquo;s pretend that you have a data set named &lt;code&gt;diamonds.csv&lt;/code&gt; (credit to the &lt;a href=&#34;https://ggplot2.tidyverse.org/&#34;&gt;&lt;code&gt;ggplot2&lt;/code&gt;&lt;/a&gt;) package. You can easily load it in your Rmarkdown file directly with your text in a code chunk like below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(dplyr)
library(readr)

diamonds &amp;lt;- read_csv(&amp;quot;dragondown-files/diamonds.csv&amp;quot;)

diamonds
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 53,940 x 10
##    carat cut       color clarity depth table price     x     y     z
##    &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1 0.23  Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43
##  2 0.21  Premium   E     SI1      59.8    61   326  3.89  3.84  2.31
##  3 0.23  Good      E     VS1      56.9    65   327  4.05  4.07  2.31
##  4 0.290 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63
##  5 0.31  Good      J     SI2      63.3    58   335  4.34  4.35  2.75
##  6 0.24  Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48
##  7 0.24  Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47
##  8 0.26  Very Good H     SI1      61.9    55   337  4.07  4.11  2.53
##  9 0.22  Fair      E     VS2      65.1    61   337  3.87  3.78  2.49
## 10 0.23  Very Good H     VS1      59.4    61   338  4     4.05  2.39
## # … with 53,930 more rows
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you can include more code chunks that analyze the data set, create production quality table and figures, or anything else and they are easily integrated with your text.&lt;/p&gt;

&lt;p&gt;Are you a fan of python instead of R? No problem! With newer versions of RStudio and the &lt;a href=&#34;https://rstudio.github.io/reticulate/&#34;&gt;&lt;code&gt;reticulate&lt;/code&gt;&lt;/a&gt; R package, you are able to &lt;a href=&#34;https://rstudio.github.io/reticulate/articles/r_markdown.html&#34;&gt;easily integrate python chunks directly into your Rmarkdown files&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;2-avoid-having-to-work-in-raw-latex&#34;&gt;2. Avoid having to work in raw LaTeX&lt;/h3&gt;

&lt;p&gt;Don&amp;rsquo;t get me wrong, there are some people that LOVE LaTeX&amp;hellip; but if we are honest, those people are likely few and far between. From the people I have spoken too, the knowledge that has been past down for using LaTeX to create the required formatting for Drexel&amp;rsquo;s dissertations is something that gets lost between generations of grad students. Luckily, thanks to the work of several former students in the Physics department (namely &lt;a href=&#34;https://github.com/wking&#34;&gt;W. Trevor King&lt;/a&gt;), there is a &lt;a href=&#34;https://github.com/DrexelPhysics/drexel-thesis&#34;&gt;drexel-thesis LaTeX class&lt;/a&gt;. Now, you could certainly go about building this class on your local machine and writing your thesis in LaTeX, but you will still have to worry about organization and actually using LaTeX. The &lt;code&gt;dragondown&lt;/code&gt; package includes a slightly modified of the &lt;code&gt;.cls&lt;/code&gt; class file from &lt;code&gt;drexel-thesis&lt;/code&gt; and a LaTeX template that allows you to completely avoid LaTeX if you want.&lt;/p&gt;

&lt;p&gt;Just like in any Rmarkdown file being knit to a pdf, you can certainly add your own LaTeX on top of the template, but you only have to do this if you want! You can also modify the template yourself once you create your &lt;code&gt;dragondown&lt;/code&gt; project.&lt;/p&gt;

&lt;h3 id=&#34;3-reproducibility&#34;&gt;3. REPRODUCIBILITY&lt;/h3&gt;

&lt;p&gt;I am including this last, but in all honesty, this is by far the most important reason for why you should switch to using &lt;code&gt;dragondown&lt;/code&gt; for your thesis. Using this package, or more specifically, R (or python) and Rmarkdown, will allow you to create a completely reproducible workflow!&lt;/p&gt;

&lt;p&gt;What does this mean? Simple, you can press one button and your whole dissertation is regenerated with any changes that you may have made.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Did you find a mistake in your data?&lt;/strong&gt; No problem (assuming your conclusions didn&amp;rsquo;t change, of course)! You can make the change and simply re-knit your dissertation and all of your results, tables, and figures will be completely re-rendered without you having to go through the painful process of remaking them all one by one and then copying and pasting them back into your manuscript!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Did you decide you want to rearrange your chapters?&lt;/strong&gt; No Problem!! Simply edit your &lt;code&gt;_bookdown.yml&lt;/code&gt; file to put them in the order that you want and re-knit!&lt;/p&gt;

&lt;p&gt;In addition to the benefits that reproducibility provides for yourself, it also makes it so that you can easily share your work with others and they will be able to reproduce your results by simply compiling your thesis. This allows for more transparency in science, which is always a good thing!&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This package was generated to try and make the life of graduate students at Drexel University a little bit easier. While this package will not perform your research or write your thesis, hopefully it will allow you to not worry about the tedious task of meeting formatting guidelines and focus on the work you care about! If you have any questions and you find any issues with the package, feel free to file an issue at the &lt;a href=&#34;https://github.com/tbradley1013/dragondown/issues&#34;&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I would like to thank both W. Trevor King and his collaborators for their work on the &lt;code&gt;drexel-thesis&lt;/code&gt; LaTeX class, as without that, this project would not have happened. I would also like to thank Yihui Xie for creating &lt;code&gt;Rmarkdown&lt;/code&gt; and &lt;code&gt;bookdown&lt;/code&gt; and Chester Ismay for the creation of &lt;code&gt;thesisdown&lt;/code&gt;, which this package is largely based on. Without all of this work, the &lt;code&gt;dragondown&lt;/code&gt; project would not exist, so thank you!&lt;/p&gt;
</description>
  </item>
  
<item>
  <title>Get the Office Quotes in R with the dundermifflin Package</title>
  <link>/2019/03/25/office-quotes-in-r-dundermifflin-package/</link>
  <pubDate>Mon, 25 Mar 2019 00:00:00 +0000</pubDate>
  
<guid>/2019/03/25/office-quotes-in-r-dundermifflin-package/</guid>
  <description>&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I am happy to share a fun project I put together this weekend - a new R package called &lt;a href=&#34;https://github.com/tbradley1013/dundermifflin&#34;&gt;&lt;code&gt;dundermifflin&lt;/code&gt;&lt;/a&gt;. If you can’t guess from the name, it will give you quotes from the Office whenever you want! This package was inspired by the &lt;a href=&#34;https://github.com/adam-gruer/goodshirt&#34;&gt;&lt;code&gt;goodshirt&lt;/code&gt;&lt;/a&gt; package, which gives users quotes from The Good Place, I was able to great a similar package for the Office. By using &lt;a href=&#34;https://github.com/anGie44/theOffice-api&#34;&gt;&lt;code&gt;theOffice-api&lt;/code&gt;&lt;/a&gt;, I created a data set, &lt;code&gt;office_quotes&lt;/code&gt;, that is shipped with the package, that has every line from the Office, with the exception of season 5.&lt;/p&gt;
&lt;p&gt;I will try to keep this brief, because as in the words of Kevin:&lt;/p&gt;
&lt;iframe src=&#34;https://giphy.com/embed/nxuSlWOH2Cx1K&#34; width=&#34;480&#34; height=&#34;270&#34; frameBorder=&#34;0&#34; class=&#34;giphy-embed&#34; allowFullScreen&gt;
&lt;/iframe&gt;
&lt;p&gt;
&lt;a href=&#34;https://giphy.com/gifs/the-office-nxuSlWOH2Cx1K&#34;&gt;via GIPHY&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;So let’s dive right in!&lt;/p&gt;
&lt;p&gt;To install the packages you can use &lt;code&gt;remotes::install_github&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;remotes::install_github(&amp;quot;tbradley1013/dundermifflin&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dundermifflin)
library(cowsay)
library(magrittr)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;getting-quotes&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Getting quotes&lt;/h1&gt;
&lt;p&gt;The implementation of this package is pretty straight forward. There main function of this package is &lt;code&gt;get_quote&lt;/code&gt; and this will return a random quote from any season and episode in the show. By default the quotes are required to have a minimum of 10 words and a maximum of 100. This is to try to remove some of the meaningless lines from the show, but it will likely also miss some of the great one-liners. See the &lt;a href=&#34;#next-steps&#34;&gt;Next Steps&lt;/a&gt; section for how I hope to deal with this! This function also allows you to specify the season, episode number, episode name, scene number, or character name to narrow down the quotes you get. By default, only quotes by characters that are apart of the main office staff are included. Let’s see how it works.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get_quote()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Good morning, Vietnam!  Okay. You know what? This isn&amp;#39;t working. Because um I&amp;#39;m not nervous in front of them. They&amp;#39;re my subordinates.
## ~ Dwight
## Season 2, Epsiode 17 - Dwight&amp;#39;s Speech&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get_quote(season = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Yeah, well, if you leave we&amp;#39;ll only have two left. Yes. Enjoy. Absolutely. Namaste. Ok, well since I am leading this, let&amp;#39;s get down to business and why don&amp;#39;t I just kind of introduce myself, OK? Um. I am Michael and I am part English, Irish, German and Scottish. Sort of a virtual United Nations. But what some of you might not know is that I am also part Native American Indian.
## ~ Michael
## Season 1, Epsiode 2 - Diversity Day&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get_quote(character = &amp;quot;Michael&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## What if Pam was a lesbian? What if she brought her &amp;quot;partner&amp;quot; in to work?  Would that be crossing the line?
## ~ Michael
## Season 2, Epsiode 2 - Sexual Harassment&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By default, &lt;code&gt;get_quote&lt;/code&gt; and all the other function variants, to be discussed in later sections, return an object of class &lt;code&gt;dunder&lt;/code&gt;. This is just a &lt;code&gt;tbl&lt;/code&gt; with info for one quote. This object can be passed to &lt;code&gt;as.character&lt;/code&gt; and then used in conjunction with &lt;code&gt;cowsay::say&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get_quote() %&amp;gt;% 
  as.character() %&amp;gt;% 
  say()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Colors cannot be applied in this environment :( Try using a terminal or RStudio.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  -------------- 
## Hey, everybody. I don&amp;#39;t know who you haven&amp;#39;t met yet, but I think this is one of them. This is my girlfriend - Carol. This is just the front of her. Show &amp;#39;em, show &amp;#39;em the other side.
## ~ Michael
## Season 3, Epsiode 10 - A Benihana Christmas 
##  --------------
##     \
##       \
##         \
##             |\___/|
##           ==) ^Y^ (==
##             \  ^  /
##              )=*=(
##             /     \
##             |     |
##            /| | | |\
##            \| | |_|/\
##       jgs  //_// ___/
##                \_)
## &lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;quotes-by-character&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Quotes by Character&lt;/h1&gt;
&lt;p&gt;While you can specify the character you wish to receive quotes from in the &lt;code&gt;get_quote&lt;/code&gt; function. There are also functions for all of the main characters! Sorry if I missed any, but:&lt;/p&gt;
&lt;iframe src=&#34;https://giphy.com/embed/gQmyUokrbbSpy&#34; width=&#34;480&#34; height=&#34;270&#34; frameBorder=&#34;0&#34; class=&#34;giphy-embed&#34; allowFullScreen&gt;
&lt;/iframe&gt;
&lt;p&gt;
&lt;a href=&#34;https://giphy.com/gifs/the-office-sue-me-annoyed-gQmyUokrbbSpy&#34;&gt;via GIPHY&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;The character functions are super straightforward. Any of the arguments, except &lt;code&gt;character&lt;/code&gt;, for &lt;code&gt;get_quote&lt;/code&gt; can be passed to them. Here are some examples:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;michael()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Love that Andy, right? Solid fellow. Seems smart enough. Likes me a lot. A lot. Too much. Like a crazy person. A little. Not super crazy... just... there&amp;#39;s something about him that creeps me out. I can&amp;#39;t really explain it. He&amp;#39;s always up in my bidness. Which is ebonics for &amp;quot;being in my face and annoying the bejesus out of me.&amp;quot; I don&amp;#39;t understand how someone could have so little self-awareness.
## ~ MIchael
## Season 3, Epsiode 13 - The Return&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;jim()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Can I just have the ham and cheese sandwich, thanks.
## ~ Jim
## Season 2, Epsiode 13 - The Secret&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dwight()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## You just need to realize that so much rides on this. You have no idea.
## ~ Dwight
## Season 8, Epsiode 17 - Test the Store&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;kevin()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Yeah. But not just the cookies, though. That was just a &amp;#39;for instance.&amp;#39;
## ~ Kevin
## Season 8, Epsiode 8 - Gettysburg&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;quotes-by-department&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Quotes by Department&lt;/h1&gt;
&lt;p&gt;You can also get quotes for entire departments.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sales()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## And you make sure to get down there and check out that Harry Potter World.
## ~ Dwight
## Season 7, Epsiode 17 - Todd Packer&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;accounting()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## No. I&amp;#39;m fine. Okay, from here now. The first lesson that I&amp;#39;m gonna teach you, right, is about finding success. And the key to finding success is to picture a winner.
## ~ Kevin
## Season 7, Epsiode 13 - The Seminar&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;reception()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Okay. Um... here it is. Don&amp;#39;t put your fingers in there.  Cool huh?
## ~ Pam
## Season 2, Epsiode 18 - Take Your Daughter to Work Day&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;thats-what-she-said&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;That’s what she said&lt;/h1&gt;
&lt;iframe src=&#34;https://giphy.com/embed/5xtDarIX9MTLD1pMoXC&#34; width=&#34;480&#34; height=&#34;270&#34; frameBorder=&#34;0&#34; class=&#34;giphy-embed&#34; allowFullScreen&gt;
&lt;/iframe&gt;
&lt;p&gt;
&lt;a href=&#34;https://giphy.com/gifs/hero0fwar-the-office-michael-scott-thats-what-she-said-5xtDarIX9MTLD1pMoXC&#34;&gt;via GIPHY&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;This one might be a little more taboo, but since it is a memorable running joke of the show, I created a function &lt;code&gt;she_said&lt;/code&gt; that returns a random “That’s what she said” joke from the office. This function will return the line before the joke and the line with the
joke.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;she_said()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Michael: I mean, they&amp;#39;re just dough twisted up with some candy. They taste so good in my mouth.
## Stanley: That&amp;#39;s what she said. [Stanley and Michael both laugh]
## Season 3, Epsiode 5 - Initiation&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;start-your-day-read-r-session-with-the-office&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Start your day (read: R session) with the Office&lt;/h1&gt;
&lt;p&gt;You can also add these functions to your &lt;code&gt;.Rprofile&lt;/code&gt; so that you start every new R session with a quote from the office!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/office-startup.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;next-steps&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Next Steps&lt;/h1&gt;
&lt;p&gt;Currently, these functions will return a random quote from the &lt;em&gt;entire&lt;/em&gt; show script that meet certain length requirements. While &lt;strong&gt;a lot&lt;/strong&gt; of them are hysterical (I have run the function a lot and enjoyed it immensely), you will certainly get some quotes that are not. Something I would like to do is create a separate data set that contains specific quotes that I (and you!) find especially funny, and you can help!. There is an argument in the &lt;code&gt;get_quote&lt;/code&gt; function, &lt;code&gt;idx&lt;/code&gt;, that can be set to &lt;code&gt;TRUE&lt;/code&gt; that will return the “Quote Index”. What you can do is use this argument and submit the quote, along with the index, to this &lt;a href=&#34;https://github.com/tbradley1013/dundermifflin/issues/1&#34;&gt;github issue&lt;/a&gt; as a comment. I will work periodically to add all of the funny ones to a new data set that will provide users with a more curated quote output to make sure you are always getting the funniest quotes possible!&lt;/p&gt;
&lt;/div&gt;
</description>
  </item>
  
<item>
  <title>Using Scoped dplyr verbs </title>
  <link>/2019/03/19/using-scoped-dplyr-verbs/</link>
  <pubDate>Tue, 19 Mar 2019 00:00:00 +0000</pubDate>
  
<guid>/2019/03/19/using-scoped-dplyr-verbs/</guid>
  <description>&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Over the past several months, I have really started to increase the amount that I have been using scoped &lt;code&gt;dplyr&lt;/code&gt; verbs. For those of you who don’t know about these functions, they are handy variants to the normal &lt;code&gt;dplyr&lt;/code&gt; verbs, such as &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;mutate&lt;/code&gt;, and &lt;code&gt;summarize&lt;/code&gt;, that allow you to target multiple columns or all of your columns. These functions allow for you to save yourself time and typing when you want to apply either one or multiple functions to more than one column, a group of columns, or to all of your columns. This post will walk through a few of the ones I use on a regular basis and how I use them!&lt;/p&gt;
&lt;p&gt;These scoped verbs typically come in three different flavors:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_if&lt;/code&gt; - This allows you to target all columns that mean a specific condition&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_at&lt;/code&gt; - This allows you to target specific columns by name&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_all&lt;/code&gt; - As the name implies, this will apply a function to every column of the data set&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Before we get started, let’s go ahead and load the libraries we will be using.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
library(ggplot2)
library(tibble)
library(stringr)
library(gt) # for the sp500 dataset
library(janitor)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;if&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;code&gt;_if&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;Let’s first take a look at &lt;code&gt;mutate_if&lt;/code&gt; by looking at an example where we want to convert factors to character variables. The data set we will be using for this example is &lt;code&gt;diamonds&lt;/code&gt; in the &lt;code&gt;ggplot2&lt;/code&gt; package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;diamonds&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 53,940 x 10
##    carat cut       color clarity depth table price     x     y     z
##    &amp;lt;dbl&amp;gt; &amp;lt;ord&amp;gt;     &amp;lt;ord&amp;gt; &amp;lt;ord&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1 0.23  Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43
##  2 0.21  Premium   E     SI1      59.8    61   326  3.89  3.84  2.31
##  3 0.23  Good      E     VS1      56.9    65   327  4.05  4.07  2.31
##  4 0.290 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63
##  5 0.31  Good      J     SI2      63.3    58   335  4.34  4.35  2.75
##  6 0.24  Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48
##  7 0.24  Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47
##  8 0.26  Very Good H     SI1      61.9    55   337  4.07  4.11  2.53
##  9 0.22  Fair      E     VS2      65.1    61   337  3.87  3.78  2.49
## 10 0.23  Very Good H     VS1      59.4    61   338  4     4.05  2.39
## # ... with 53,930 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As we can see, there are three columns of factors in the data set (&lt;code&gt;ord&lt;/code&gt; is just an ordered factor) - &lt;code&gt;cut&lt;/code&gt;, &lt;code&gt;color&lt;/code&gt;, and &lt;code&gt;clarity&lt;/code&gt;. If you weren’t using scoped verbs, then you would convert them with something like this.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;diamonds %&amp;gt;% 
  mutate(
    cut = as.character(cut),
    color = as.character(color),
    clarity = as.character(clarity)
  )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 53,940 x 10
##    carat cut       color clarity depth table price     x     y     z
##    &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1 0.23  Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43
##  2 0.21  Premium   E     SI1      59.8    61   326  3.89  3.84  2.31
##  3 0.23  Good      E     VS1      56.9    65   327  4.05  4.07  2.31
##  4 0.290 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63
##  5 0.31  Good      J     SI2      63.3    58   335  4.34  4.35  2.75
##  6 0.24  Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48
##  7 0.24  Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47
##  8 0.26  Very Good H     SI1      61.9    55   337  4.07  4.11  2.53
##  9 0.22  Fair      E     VS2      65.1    61   337  3.87  3.78  2.49
## 10 0.23  Very Good H     VS1      59.4    61   338  4     4.05  2.39
## # ... with 53,930 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While this certainly works, it is easy to see how this method can get out of hand rather quickly. Now with the scoped variant, it is much cleaner. You have to pass a predicate function that will return &lt;code&gt;TRUE&lt;/code&gt; or &lt;code&gt;FALSE&lt;/code&gt; for the column (e.g. &lt;code&gt;is.factor&lt;/code&gt;) and then it will apply the function (e.g. &lt;code&gt;as.character&lt;/code&gt;) to all columns that return &lt;code&gt;TRUE&lt;/code&gt; from the predicate.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;diamonds %&amp;gt;% 
  mutate_if(is.factor, as.character)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 53,940 x 10
##    carat cut       color clarity depth table price     x     y     z
##    &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1 0.23  Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43
##  2 0.21  Premium   E     SI1      59.8    61   326  3.89  3.84  2.31
##  3 0.23  Good      E     VS1      56.9    65   327  4.05  4.07  2.31
##  4 0.290 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63
##  5 0.31  Good      J     SI2      63.3    58   335  4.34  4.35  2.75
##  6 0.24  Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48
##  7 0.24  Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47
##  8 0.26  Very Good H     SI1      61.9    55   337  4.07  4.11  2.53
##  9 0.22  Fair      E     VS2      65.1    61   337  3.87  3.78  2.49
## 10 0.23  Very Good H     VS1      59.4    61   338  4     4.05  2.39
## # ... with 53,930 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The conversion of factors (and other datatypes) is probably the thing I use &lt;code&gt;mutate_if&lt;/code&gt; for the most, but you can use it for anything that has to be applied to all columns that meet certain conditions. If we wanted to add 10% of the mean of each numeric column to every value in that column (this is not practical, but just as an illustration) you could do the following.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;diamonds %&amp;gt;% 
  mutate_if(is.numeric, list(~.+0.1*mean(., na.rm = TRUE)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 53,940 x 10
##    carat cut       color clarity depth table price     x     y     z
##    &amp;lt;dbl&amp;gt; &amp;lt;ord&amp;gt;     &amp;lt;ord&amp;gt; &amp;lt;ord&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1 0.310 Ideal     E     SI2      67.7  60.7  719.  4.52  4.55  2.78
##  2 0.290 Premium   E     SI1      66.0  66.7  719.  4.46  4.41  2.66
##  3 0.310 Good      E     VS1      63.1  70.7  720.  4.62  4.64  2.66
##  4 0.370 Premium   I     VS2      68.6  63.7  727.  4.77  4.80  2.98
##  5 0.390 Good      J     SI2      69.5  63.7  728.  4.91  4.92  3.10
##  6 0.320 Very Good J     VVS2     69.0  62.7  729.  4.51  4.53  2.83
##  7 0.320 Very Good I     VVS1     68.5  62.7  729.  4.52  4.55  2.82
##  8 0.340 Very Good H     SI1      68.1  60.7  730.  4.64  4.68  2.88
##  9 0.300 Fair      E     VS2      71.3  66.7  730.  4.44  4.35  2.84
## 10 0.310 Very Good H     VS1      65.6  66.7  731.  4.57  4.62  2.74
## # ... with 53,930 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The notations for passing either anonymous functions (such as above) or multiple functions has changed in the release of &lt;code&gt;dplyr 0.8.0&lt;/code&gt;. Previously the above code would read &lt;code&gt;mutate_if(is.numeric, funs(.+0.1*mean(., na.rm=TRUE)))&lt;/code&gt;. The &lt;code&gt;funs&lt;/code&gt; function has been soft deprecated in the new release. This means that it can still be used but the newer implementation should be used as it will either no longer be supported or will be removed later. Running the &lt;code&gt;mutate_if&lt;/code&gt; call with &lt;code&gt;funs&lt;/code&gt; results in the following warning message:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Warning message:
funs() is soft deprecated as of dplyr 0.8.0
please use list() instead
# Before:
funs(name = f(.)
# After: 
list(name = ~f(.))
This warning is displayed once per session.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, the original columns are modified to represent the new value. If you wanted to create new columns for all of the columns that this predicate function applies to, you can give the function a name in our list. The name of the function is appended to the name of every column that it applies to with a &lt;code&gt;_&lt;/code&gt; as a separator.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;diamonds %&amp;gt;% 
  mutate_if(is.numeric, list(&amp;quot;new&amp;quot; = ~.+0.1*mean(., na.rm = TRUE)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 53,940 x 17
##    carat cut   color clarity depth table price     x     y     z carat_new
##    &amp;lt;dbl&amp;gt; &amp;lt;ord&amp;gt; &amp;lt;ord&amp;gt; &amp;lt;ord&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;
##  1 0.23  Ideal E     SI2      61.5    55   326  3.95  3.98  2.43     0.310
##  2 0.21  Prem~ E     SI1      59.8    61   326  3.89  3.84  2.31     0.290
##  3 0.23  Good  E     VS1      56.9    65   327  4.05  4.07  2.31     0.310
##  4 0.290 Prem~ I     VS2      62.4    58   334  4.2   4.23  2.63     0.370
##  5 0.31  Good  J     SI2      63.3    58   335  4.34  4.35  2.75     0.390
##  6 0.24  Very~ J     VVS2     62.8    57   336  3.94  3.96  2.48     0.320
##  7 0.24  Very~ I     VVS1     62.3    57   336  3.95  3.98  2.47     0.320
##  8 0.26  Very~ H     SI1      61.9    55   337  4.07  4.11  2.53     0.340
##  9 0.22  Fair  E     VS2      65.1    61   337  3.87  3.78  2.49     0.300
## 10 0.23  Very~ H     VS1      59.4    61   338  4     4.05  2.39     0.310
## # ... with 53,930 more rows, and 6 more variables: depth_new &amp;lt;dbl&amp;gt;,
## #   table_new &amp;lt;dbl&amp;gt;, price_new &amp;lt;dbl&amp;gt;, x_new &amp;lt;dbl&amp;gt;, y_new &amp;lt;dbl&amp;gt;,
## #   z_new &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similar to &lt;code&gt;mutate_if&lt;/code&gt;, &lt;code&gt;summarize_if&lt;/code&gt;/&lt;code&gt;summarise_if&lt;/code&gt; works by allowing you to select all the columns that meet a certain condition and summarizing those columns with a given function. It should be noted that in this case, just as with &lt;code&gt;summarize&lt;/code&gt;, a function has to be provided that will return only a single value. If you would like to see a way around that requirement, using &lt;code&gt;purrr&lt;/code&gt; and scoped verbs, you can see &lt;a href=&#34;https://tbradley1013.github.io/2018/10/01/calculating-quantiles-for-groups-with-dplyr-summarize-and-purrr-partial/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let’s see how &lt;code&gt;summarize_if&lt;/code&gt; works:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;diamonds %&amp;gt;% 
  summarize_if(is.numeric, list(&amp;quot;mean&amp;quot; = mean, &amp;quot;median&amp;quot; = median))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 14
##   carat_mean depth_mean table_mean price_mean x_mean y_mean z_mean
##        &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
## 1      0.798       61.7       57.5      3933.   5.73   5.73   3.54
## # ... with 7 more variables: carat_median &amp;lt;dbl&amp;gt;, depth_median &amp;lt;dbl&amp;gt;,
## #   table_median &amp;lt;dbl&amp;gt;, price_median &amp;lt;dbl&amp;gt;, x_median &amp;lt;dbl&amp;gt;,
## #   y_median &amp;lt;dbl&amp;gt;, z_median &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also create more custom predicates to be used for our &lt;code&gt;_if&lt;/code&gt; functions. Let’s create one that returns whether a column is numeric and has at least one value higher than 50.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;higher_fifty &amp;lt;- function(x){
  if (is.numeric(x)){
    return(any(x &amp;gt; 50))
  } else {
    return(FALSE)
  }
}


diamonds %&amp;gt;% 
  summarize_if(higher_fifty, list(&amp;quot;mean&amp;quot; = mean))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 4
##   depth_mean table_mean price_mean y_mean
##        &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
## 1       61.7       57.5      3933.   5.73&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another useful &lt;code&gt;_if&lt;/code&gt; variant is &lt;code&gt;select_if&lt;/code&gt;. You may want to select all of the numeric columns in the &lt;code&gt;diamonds&lt;/code&gt; data set for further analysis, and &lt;code&gt;select_if&lt;/code&gt; is perfect for this case. The implementation is the same as &lt;code&gt;mutate_if&lt;/code&gt; and &lt;code&gt;summarize_if&lt;/code&gt;, just instead of specifying a function to apply to the selected columns, you only specify a predicate function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;diamonds %&amp;gt;% 
  select_if(is.numeric)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 53,940 x 7
##    carat depth table price     x     y     z
##    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1 0.23   61.5    55   326  3.95  3.98  2.43
##  2 0.21   59.8    61   326  3.89  3.84  2.31
##  3 0.23   56.9    65   327  4.05  4.07  2.31
##  4 0.290  62.4    58   334  4.2   4.23  2.63
##  5 0.31   63.3    58   335  4.34  4.35  2.75
##  6 0.24   62.8    57   336  3.94  3.96  2.48
##  7 0.24   62.3    57   336  3.95  3.98  2.47
##  8 0.26   61.9    55   337  4.07  4.11  2.53
##  9 0.22   65.1    61   337  3.87  3.78  2.49
## 10 0.23   59.4    61   338  4     4.05  2.39
## # ... with 53,930 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The last scoped verb for the &lt;code&gt;_if&lt;/code&gt; variants is &lt;code&gt;filter&lt;/code&gt;. &lt;code&gt;filter_if&lt;/code&gt; is slightly different than the rest of the &lt;code&gt;_if&lt;/code&gt; variants, because in addition to operating on columns in the data frame based on a condition, it can also operate on the rows of the data frame based on a condition. This row-wise operation is handled by the &lt;code&gt;.vars_predicate&lt;/code&gt; argument in the scoped &lt;code&gt;filter&lt;/code&gt; verbs. This argument is used in conjunction with the helper predicate functions &lt;code&gt;all_vars&lt;/code&gt; and &lt;code&gt;any_vars&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For this example, we will use the &lt;code&gt;sp500&lt;/code&gt; data set from the &lt;code&gt;gt&lt;/code&gt; package. Let’s say that we want to filter all of the rows that did not have a value of greater than $2000 for the entire day. We can do that like this.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gt::sp500 %&amp;gt;% 
  filter_if(is.numeric, all_vars(. &amp;gt; 2000))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 249 x 7
##    date        open  high   low close     volume adj_close
##    &amp;lt;date&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;
##  1 2015-12-31 2061. 2063. 2044. 2044. 2655330000     2044.
##  2 2015-12-30 2077. 2077. 2062. 2063. 2367430000     2063.
##  3 2015-12-29 2061. 2082. 2061. 2078. 2542000000     2078.
##  4 2015-12-28 2058. 2058. 2044. 2056. 2492510000     2056.
##  5 2015-12-24 2064. 2067. 2059. 2061. 1411860000     2061.
##  6 2015-12-23 2042. 2065. 2042. 2064. 3484090000     2064.
##  7 2015-12-22 2023. 2043. 2020. 2039. 3520860000     2039.
##  8 2015-12-21 2010. 2023. 2006. 2021. 3760280000     2021.
##  9 2015-12-18 2041. 2041. 2005. 2006. 6683070000     2006.
## 10 2015-12-17 2074. 2076. 2042. 2042. 4327390000     2042.
## # ... with 239 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;all_vars&lt;/code&gt; requires that all the columns returning &lt;code&gt;TRUE&lt;/code&gt; from the predicate meet the filter requirements. Conversely, &lt;code&gt;any_vars&lt;/code&gt; requires that only one of the columns meets the specified requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;at&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;code&gt;_at&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;Now we can take a look at another variant of the dplyr verbs that allows us to target specific columns, &lt;code&gt;_at&lt;/code&gt;. These functions are super handy when you want to apply a function to numerous columns by name. For this example, lets use the ever useful &lt;code&gt;mtcars&lt;/code&gt; data set with the row names moved to a column named &lt;code&gt;cars&lt;/code&gt;. We will assign this modified tibble to &lt;code&gt;cars_tbl&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cars_tbl &amp;lt;- mtcars %&amp;gt;% 
  rownames_to_column(&amp;quot;car&amp;quot;) %&amp;gt;% 
  as_tibble()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s say that we want to normalize the &lt;code&gt;mpg&lt;/code&gt;, &lt;code&gt;hp&lt;/code&gt;, and &lt;code&gt;drat&lt;/code&gt; columns from zero to one. We can do that by writing a simple function and applying it to each column, like this.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;norm_dat &amp;lt;- function(x){
  (x-min(x))/(max(x)-min(x))
}

cars_tbl %&amp;gt;% 
  mutate(
    mpg = norm_dat(mpg),
    hp = norm_dat(hp),
    drat = norm_dat(drat)
  )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 32 x 12
##    car     mpg   cyl  disp     hp  drat    wt  qsec    vs    am  gear  carb
##    &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1 Mazd~ 0.451     6  160  0.205  0.525  2.62  16.5     0     1     4     4
##  2 Mazd~ 0.451     6  160  0.205  0.525  2.88  17.0     0     1     4     4
##  3 Dats~ 0.528     4  108  0.145  0.502  2.32  18.6     1     1     4     1
##  4 Horn~ 0.468     6  258  0.205  0.147  3.22  19.4     1     0     3     1
##  5 Horn~ 0.353     8  360  0.435  0.180  3.44  17.0     0     0     3     2
##  6 Vali~ 0.328     6  225  0.187  0      3.46  20.2     1     0     3     1
##  7 Dust~ 0.166     8  360  0.682  0.207  3.57  15.8     0     0     3     4
##  8 Merc~ 0.596     4  147. 0.0353 0.429  3.19  20       1     0     4     2
##  9 Merc~ 0.528     4  141. 0.152  0.535  3.15  22.9     1     0     4     2
## 10 Merc~ 0.374     6  168. 0.251  0.535  3.44  18.3     1     0     4     4
## # ... with 22 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Just like with the previous example of converting factors to characters, this certainly works but can quickly become cumbersome when applying the same function to multiple columns in a data set. &lt;code&gt;mutate_at&lt;/code&gt; allows you to specifically target columns to apply a function to.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cars_tbl%&amp;gt;% 
  mutate_at(vars(mpg, hp, drat), list(~norm_dat))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 32 x 12
##    car     mpg   cyl  disp     hp  drat    wt  qsec    vs    am  gear  carb
##    &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1 Mazd~ 0.451     6  160  0.205  0.525  2.62  16.5     0     1     4     4
##  2 Mazd~ 0.451     6  160  0.205  0.525  2.88  17.0     0     1     4     4
##  3 Dats~ 0.528     4  108  0.145  0.502  2.32  18.6     1     1     4     1
##  4 Horn~ 0.468     6  258  0.205  0.147  3.22  19.4     1     0     3     1
##  5 Horn~ 0.353     8  360  0.435  0.180  3.44  17.0     0     0     3     2
##  6 Vali~ 0.328     6  225  0.187  0      3.46  20.2     1     0     3     1
##  7 Dust~ 0.166     8  360  0.682  0.207  3.57  15.8     0     0     3     4
##  8 Merc~ 0.596     4  147. 0.0353 0.429  3.19  20       1     0     4     2
##  9 Merc~ 0.528     4  141. 0.152  0.535  3.15  22.9     1     0     4     2
## 10 Merc~ 0.374     6  168. 0.251  0.535  3.44  18.3     1     0     4     4
## # ... with 22 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can see how handy this can become and how much time this can save you if you are repeating the same operation on numerous columns within a tibble. An second, but equally advantageous, use of &lt;code&gt;mutate_at&lt;/code&gt; is the &lt;em&gt;deselection&lt;/em&gt; of columns to which a function should be applied. Say that we want to apply our normalization function to every column except &lt;code&gt;car&lt;/code&gt;, &lt;code&gt;vs&lt;/code&gt; and &lt;code&gt;am&lt;/code&gt;, since they are binary columns. To do this we would use the same methods as your would if you were removing a column with &lt;code&gt;select&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cars_tbl %&amp;gt;% 
  mutate_at(vars(-c(car, vs, am)), list(~norm_dat))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 32 x 12
##    car     mpg   cyl   disp     hp  drat    wt  qsec    vs    am  gear
##    &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1 Mazd~ 0.451   0.5 0.222  0.205  0.525 0.283 0.233     0     1   0.5
##  2 Mazd~ 0.451   0.5 0.222  0.205  0.525 0.348 0.3       0     1   0.5
##  3 Dats~ 0.528   0   0.0920 0.145  0.502 0.206 0.489     1     1   0.5
##  4 Horn~ 0.468   0.5 0.466  0.205  0.147 0.435 0.588     1     0   0  
##  5 Horn~ 0.353   1   0.721  0.435  0.180 0.493 0.3       0     0   0  
##  6 Vali~ 0.328   0.5 0.384  0.187  0     0.498 0.681     1     0   0  
##  7 Dust~ 0.166   1   0.721  0.682  0.207 0.526 0.160     0     0   0  
##  8 Merc~ 0.596   0   0.189  0.0353 0.429 0.429 0.655     1     0   0.5
##  9 Merc~ 0.528   0   0.174  0.152  0.535 0.419 1         1     0   0.5
## 10 Merc~ 0.374   0.5 0.241  0.251  0.535 0.493 0.452     1     0   0.5
## # ... with 22 more rows, and 1 more variable: carb &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let’s say that we want to get the mean, sd, median, and count of all values greater than the mean for the &lt;code&gt;mpg&lt;/code&gt;, &lt;code&gt;hp&lt;/code&gt;, and &lt;code&gt;drat&lt;/code&gt; columns. We can do that using the &lt;code&gt;summarize_at&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cars_summary &amp;lt;- cars_tbl %&amp;gt;% 
  summarize_at(vars(mpg, hp, drat), list(&amp;quot;mean&amp;quot; = mean, &amp;quot;sd&amp;quot; = sd, &amp;quot;median&amp;quot; = median, &amp;quot;n_higher_half&amp;quot; = ~sum(. &amp;gt; mean(.))))

cars_summary&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 12
##   mpg_mean hp_mean drat_mean mpg_sd hp_sd drat_sd mpg_median hp_median
##      &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;
## 1     20.1    147.      3.60   6.03  68.6   0.535       19.2       123
## # ... with 4 more variables: drat_median &amp;lt;dbl&amp;gt;, mpg_n_higher_half &amp;lt;int&amp;gt;,
## #   hp_n_higher_half &amp;lt;int&amp;gt;, drat_n_higher_half &amp;lt;int&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above example demonstrates how you can simply pass a function name to be applied to the column, and how you can pass slightly more complex functions to the &lt;code&gt;.funs&lt;/code&gt; argument using &lt;code&gt;.&lt;/code&gt; notation.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;all&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;code&gt;_all&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;The &lt;code&gt;_all&lt;/code&gt; variant works similarly to the other two, just now we are by default targeting &lt;em&gt;all&lt;/em&gt; of the columns in the data frame. This can be extremely useful if you want to perform transformations on all of the columns in your data set or get summary variables for all of the columns. One place this may be useful is if you are fitting multivariate models and want to normalize all of your variables. Let’s show how these functions work with a quick example of both &lt;code&gt;mutate_all&lt;/code&gt; and &lt;code&gt;summarize_all&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First, if we want to normalize all of the columns in a data set, we can do that by applying the &lt;code&gt;norm_dat&lt;/code&gt; function defined above with &lt;code&gt;mutate_all&lt;/code&gt;. Let’s see what this looks like using the &lt;code&gt;USArrests&lt;/code&gt; data set.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;USArrests %&amp;gt;%
  mutate_all(norm_dat)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        Murder     Assault  UrbanPop       Rape
## 1  0.74698795 0.654109589 0.4406780 0.35917313
## 2  0.55421687 0.746575342 0.2711864 0.96124031
## 3  0.43975904 0.852739726 0.8135593 0.61240310
## 4  0.48192771 0.496575342 0.3050847 0.31524548
## 5  0.49397590 0.791095890 1.0000000 0.86046512
## 6  0.42771084 0.544520548 0.7796610 0.81136951
## 7  0.15060241 0.222602740 0.7627119 0.09819121
## 8  0.30722892 0.660958904 0.6779661 0.21963824
## 9  0.87951807 0.993150685 0.8135593 0.63565891
## 10 1.00000000 0.568493151 0.4745763 0.47803618
## 11 0.27108434 0.003424658 0.8644068 0.33333333
## 12 0.10843373 0.256849315 0.3728814 0.17829457
## 13 0.57831325 0.698630137 0.8644068 0.43152455
## 14 0.38554217 0.232876712 0.5593220 0.35400517
## 15 0.08433735 0.037671233 0.4237288 0.10335917
## 16 0.31325301 0.239726027 0.5762712 0.27648579
## 17 0.53614458 0.219178082 0.3389831 0.23255814
## 18 0.87951807 0.698630137 0.5762712 0.38501292
## 19 0.07831325 0.130136986 0.3220339 0.01291990
## 20 0.63253012 0.873287671 0.5932203 0.52971576
## 21 0.21686747 0.356164384 0.8983051 0.23255814
## 22 0.68072289 0.719178082 0.7118644 0.71834625
## 23 0.11445783 0.092465753 0.5762712 0.19638243
## 24 0.92168675 0.732876712 0.2033898 0.25322997
## 25 0.49397590 0.455479452 0.6440678 0.54005168
## 26 0.31325301 0.219178082 0.3559322 0.23514212
## 27 0.21084337 0.195205479 0.5084746 0.23772610
## 28 0.68674699 0.708904110 0.8305085 1.00000000
## 29 0.07831325 0.041095890 0.4067797 0.05684755
## 30 0.39759036 0.390410959 0.9661017 0.29715762
## 31 0.63855422 0.821917808 0.6440678 0.64082687
## 32 0.62048193 0.715753425 0.9152542 0.48578811
## 33 0.73493976 1.000000000 0.2203390 0.22739018
## 34 0.00000000 0.000000000 0.2033898 0.00000000
## 35 0.39156627 0.256849315 0.7288136 0.36434109
## 36 0.34939759 0.363013699 0.6101695 0.32816537
## 37 0.24698795 0.390410959 0.5932203 0.56847545
## 38 0.33132530 0.208904110 0.6779661 0.19638243
## 39 0.15662651 0.441780822 0.9322034 0.02583979
## 40 0.81927711 0.801369863 0.2711864 0.39276486
## 41 0.18072289 0.140410959 0.2203390 0.14211886
## 42 0.74698795 0.489726027 0.4576271 0.50645995
## 43 0.71686747 0.534246575 0.8135593 0.47028424
## 44 0.14457831 0.256849315 0.8135593 0.40310078
## 45 0.08433735 0.010273973 0.0000000 0.10077519
## 46 0.46385542 0.380136986 0.5254237 0.34625323
## 47 0.19277108 0.342465753 0.6949153 0.48837209
## 48 0.29518072 0.123287671 0.1186441 0.05167959
## 49 0.10843373 0.027397260 0.5762712 0.09043928
## 50 0.36144578 0.397260274 0.4745763 0.21447028&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is that easy! We can also create new names for the mutated columns in the same manner that was shown in the &lt;code&gt;_if&lt;/code&gt; section.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;USArrests %&amp;gt;% 
  mutate_all(list(&amp;quot;norm&amp;quot; = norm_dat))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Murder Assault UrbanPop Rape Murder_norm Assault_norm UrbanPop_norm
## 1    13.2     236       58 21.2  0.74698795  0.654109589     0.4406780
## 2    10.0     263       48 44.5  0.55421687  0.746575342     0.2711864
## 3     8.1     294       80 31.0  0.43975904  0.852739726     0.8135593
## 4     8.8     190       50 19.5  0.48192771  0.496575342     0.3050847
## 5     9.0     276       91 40.6  0.49397590  0.791095890     1.0000000
## 6     7.9     204       78 38.7  0.42771084  0.544520548     0.7796610
## 7     3.3     110       77 11.1  0.15060241  0.222602740     0.7627119
## 8     5.9     238       72 15.8  0.30722892  0.660958904     0.6779661
## 9    15.4     335       80 31.9  0.87951807  0.993150685     0.8135593
## 10   17.4     211       60 25.8  1.00000000  0.568493151     0.4745763
## 11    5.3      46       83 20.2  0.27108434  0.003424658     0.8644068
## 12    2.6     120       54 14.2  0.10843373  0.256849315     0.3728814
## 13   10.4     249       83 24.0  0.57831325  0.698630137     0.8644068
## 14    7.2     113       65 21.0  0.38554217  0.232876712     0.5593220
## 15    2.2      56       57 11.3  0.08433735  0.037671233     0.4237288
## 16    6.0     115       66 18.0  0.31325301  0.239726027     0.5762712
## 17    9.7     109       52 16.3  0.53614458  0.219178082     0.3389831
## 18   15.4     249       66 22.2  0.87951807  0.698630137     0.5762712
## 19    2.1      83       51  7.8  0.07831325  0.130136986     0.3220339
## 20   11.3     300       67 27.8  0.63253012  0.873287671     0.5932203
## 21    4.4     149       85 16.3  0.21686747  0.356164384     0.8983051
## 22   12.1     255       74 35.1  0.68072289  0.719178082     0.7118644
## 23    2.7      72       66 14.9  0.11445783  0.092465753     0.5762712
## 24   16.1     259       44 17.1  0.92168675  0.732876712     0.2033898
## 25    9.0     178       70 28.2  0.49397590  0.455479452     0.6440678
## 26    6.0     109       53 16.4  0.31325301  0.219178082     0.3559322
## 27    4.3     102       62 16.5  0.21084337  0.195205479     0.5084746
## 28   12.2     252       81 46.0  0.68674699  0.708904110     0.8305085
## 29    2.1      57       56  9.5  0.07831325  0.041095890     0.4067797
## 30    7.4     159       89 18.8  0.39759036  0.390410959     0.9661017
## 31   11.4     285       70 32.1  0.63855422  0.821917808     0.6440678
## 32   11.1     254       86 26.1  0.62048193  0.715753425     0.9152542
## 33   13.0     337       45 16.1  0.73493976  1.000000000     0.2203390
## 34    0.8      45       44  7.3  0.00000000  0.000000000     0.2033898
## 35    7.3     120       75 21.4  0.39156627  0.256849315     0.7288136
## 36    6.6     151       68 20.0  0.34939759  0.363013699     0.6101695
## 37    4.9     159       67 29.3  0.24698795  0.390410959     0.5932203
## 38    6.3     106       72 14.9  0.33132530  0.208904110     0.6779661
## 39    3.4     174       87  8.3  0.15662651  0.441780822     0.9322034
## 40   14.4     279       48 22.5  0.81927711  0.801369863     0.2711864
## 41    3.8      86       45 12.8  0.18072289  0.140410959     0.2203390
## 42   13.2     188       59 26.9  0.74698795  0.489726027     0.4576271
## 43   12.7     201       80 25.5  0.71686747  0.534246575     0.8135593
## 44    3.2     120       80 22.9  0.14457831  0.256849315     0.8135593
## 45    2.2      48       32 11.2  0.08433735  0.010273973     0.0000000
## 46    8.5     156       63 20.7  0.46385542  0.380136986     0.5254237
## 47    4.0     145       73 26.2  0.19277108  0.342465753     0.6949153
## 48    5.7      81       39  9.3  0.29518072  0.123287671     0.1186441
## 49    2.6      53       66 10.8  0.10843373  0.027397260     0.5762712
## 50    6.8     161       60 15.6  0.36144578  0.397260274     0.4745763
##     Rape_norm
## 1  0.35917313
## 2  0.96124031
## 3  0.61240310
## 4  0.31524548
## 5  0.86046512
## 6  0.81136951
## 7  0.09819121
## 8  0.21963824
## 9  0.63565891
## 10 0.47803618
## 11 0.33333333
## 12 0.17829457
## 13 0.43152455
## 14 0.35400517
## 15 0.10335917
## 16 0.27648579
## 17 0.23255814
## 18 0.38501292
## 19 0.01291990
## 20 0.52971576
## 21 0.23255814
## 22 0.71834625
## 23 0.19638243
## 24 0.25322997
## 25 0.54005168
## 26 0.23514212
## 27 0.23772610
## 28 1.00000000
## 29 0.05684755
## 30 0.29715762
## 31 0.64082687
## 32 0.48578811
## 33 0.22739018
## 34 0.00000000
## 35 0.36434109
## 36 0.32816537
## 37 0.56847545
## 38 0.19638243
## 39 0.02583979
## 40 0.39276486
## 41 0.14211886
## 42 0.50645995
## 43 0.47028424
## 44 0.40310078
## 45 0.10077519
## 46 0.34625323
## 47 0.48837209
## 48 0.05167959
## 49 0.09043928
## 50 0.21447028&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, if we wanted to summarize all of these columns, it would look like this.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;USArrests %&amp;gt;% 
  summarize_all(list(mean = mean, median = median))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Murder_mean Assault_mean UrbanPop_mean Rape_mean Murder_median
## 1       7.788       170.76         65.54    21.232          7.25
##   Assault_median UrbanPop_median Rape_median
## 1            159              66        20.1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, it is that easy!&lt;/p&gt;
&lt;p&gt;Now, since the implementation is fairly similar to the other scoped variables, I won’t belabor the point. Instead, I will leave you will one other useful tool from the &lt;code&gt;_all&lt;/code&gt; variants that I find helpful. Ordinarily, I prefer to work with my variable names in snake case. Luckily, the &lt;code&gt;janitor&lt;/code&gt; package provides a &lt;em&gt;great&lt;/em&gt; function, &lt;code&gt;clean_names&lt;/code&gt;, to convert column names to all kinds of formats, snake case included. However, I find that when I want to share data with people not working in R, such as my manager, she does not want to see column names in snake case. Unfortunately, as far as I know, there is not a simply function, at this point, to convert R friendly column names back to title case. To accomplish this easily, I use the &lt;code&gt;rename_all&lt;/code&gt; function. Let me know you an example with the &lt;code&gt;iris&lt;/code&gt; data set after I have converted it to snake case with &lt;code&gt;janitor::clean_names&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;iris_tbl &amp;lt;- iris %&amp;gt;% 
  as_tibble() %&amp;gt;% 
  janitor::clean_names()

iris_tbl&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 150 x 5
##    sepal_length sepal_width petal_length petal_width species
##           &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt;  
##  1          5.1         3.5          1.4         0.2 setosa 
##  2          4.9         3            1.4         0.2 setosa 
##  3          4.7         3.2          1.3         0.2 setosa 
##  4          4.6         3.1          1.5         0.2 setosa 
##  5          5           3.6          1.4         0.2 setosa 
##  6          5.4         3.9          1.7         0.4 setosa 
##  7          4.6         3.4          1.4         0.3 setosa 
##  8          5           3.4          1.5         0.2 setosa 
##  9          4.4         2.9          1.4         0.2 setosa 
## 10          4.9         3.1          1.5         0.1 setosa 
## # ... with 140 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, now the names are super R-friendly. However, we want them to be converted back to title case without the underscores. Let’s see how that can be done.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;iris_tbl %&amp;gt;% 
  rename_all(list(~stringr::str_to_title(stringr::str_replace(., &amp;quot;_&amp;quot;, &amp;quot; &amp;quot;)))) %&amp;gt;% 
  head() %&amp;gt;% 
  knitr::kable()&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;right&#34;&gt;Sepal Length&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Sepal Width&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Petal Length&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Petal Width&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Species&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;5.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;setosa&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;4.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;setosa&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;4.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;setosa&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;4.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;setosa&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;5.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;setosa&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;5.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;setosa&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This, in my opinion, looks much nicer in a table that you are distributing outside of the R world.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;The scoped verbs in the &lt;code&gt;dplyr&lt;/code&gt; package are just one more example of why this package is so useful. These functions allow you to apply other functions to your data set across numerous columns without repeating yourself and have the potential to greatly speed up your workflow and reduce the amount of typing that is required if you start to use them in your code.&lt;/p&gt;
&lt;p&gt;This post by no means covers all of the scoped verbs that are available, but rather just gives you a taste of how you implement different versions of them. If you have any questions or comments, please share them below!&lt;/p&gt;
&lt;/div&gt;
</description>
  </item>
  
<item>
  <title>Presentation at Delaware Watershed Research Conference 2018</title>
  <link>/2018/11/28/presentation-at-delaware-watershed-research-conference-2018/</link>
  <pubDate>Wed, 28 Nov 2018 00:00:00 +0000</pubDate>
  
<guid>/2018/11/28/presentation-at-delaware-watershed-research-conference-2018/</guid>
  <description>&lt;p&gt;I am pleased to announce that I will presenting at the upcoming &lt;a href=&#34;https://ansp.org/research/environmental-research/projects/watershed-protection-program/delaware-watershed-research-conference/&#34;&gt;Delaware Watershed Reseach Conference 2018&lt;/a&gt; at the Academy of Natural Sciences of Drexel University on Thursday November 29, 2018. My presentation is entitled “Comparing Illumina MiSeq and PacBio Sequel Sequencing of Fecal Samples from Various Animal Sources Potentially Contributing to Microbial Contamination of the Delaware River Watershed”. This presentation will discuss ongoing research within the &lt;a href=&#34;http://microbes.cae.drexel.edu/people/dr-sales&#34;&gt;Sales Laboratory Group&lt;/a&gt; at Drexel University.&lt;/p&gt;
&lt;p&gt;The project is investigating the use of different next generation sequencing techniques and their ability to perform microbial source tracking. The presentation at DWRC 2018 will focus solely on the difference between the two sequencing results for just the fecal samples collected in this study. Specifically, looking at whether sequencing the full length 16S rRNA gene (done using the PacBio Sequel sequencing method) is more effective than targeting specific hyper-variable regions of the 16S rRNA gene (done using the Illumina MiSeq sequencing method). The abstract and a link to the presentation can be found &lt;a href=&#34;https://tbradley1013.github.io/presentations/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I will be presenting at 11 AM in the Freshwater Status and Trends track of the conference.&lt;/p&gt;
&lt;p&gt;Please come and take a look at the research I am working on!&lt;/p&gt;
</description>
  </item>
  
<item>
  <title>Calculating quantiles for groups with dplyr::summarize and purrr::partial</title>
  <link>/2018/10/01/calculating-quantiles-for-groups-with-dplyr-summarize-and-purrr-partial/</link>
  <pubDate>Mon, 01 Oct 2018 00:00:00 +0000</pubDate>
  
<guid>/2018/10/01/calculating-quantiles-for-groups-with-dplyr-summarize-and-purrr-partial/</guid>
  <description>&lt;p&gt;Recently, I was trying to calculate the percentiles of a set of variables within a data set grouped by another variable. However, I quickly ran into the realization that this is not very straight forward when using &lt;code&gt;dplyr&lt;/code&gt;’s &lt;code&gt;summarize&lt;/code&gt;. Before I demonstrate, let’s load the libraries that we will need.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
library(purrr)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don’t believe me when I say that it is not straight forward, go ahead and try to run the following block of code.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars %&amp;gt;% 
  dplyr::group_by(cyl) %&amp;gt;% 
  dplyr::summarize(quants = quantile(mpg, probs = c(0.2, 0.5, 0.8)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you ran the code, you will see that it throws the following error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Error in summarise_impl(.data, dots) : 
  Column `quants` must be length 1 (a summary value), not 3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This error is telling us that the result is returning an object of length 3 (our three quantiles) when it is expecting to get only one value. A quick Google search comes up with &lt;a href=&#34;https://stackoverflow.com/questions/30488389/using-dplyr-window-functions-to-calculate-percentiles&#34;&gt;numerous&lt;/a&gt; &lt;a href=&#34;https://stackoverflow.com/questions/46935464/dplyr-to-count-means-by-group-and-then-quantiles-for-each&#34;&gt;stack&lt;/a&gt; &lt;a href=&#34;https://stackoverflow.com/questions/46177312/how-to-find-quantile-of-grouped-variable-in-dplyr&#34;&gt;overflow&lt;/a&gt; &lt;a href=&#34;https://stackoverflow.com/questions/37845915/how-to-use-quantile-with-dplyr-and-group-by&#34;&gt;questions&lt;/a&gt; and &lt;a href=&#34;https://groups.google.com/forum/#!topic/manipulatr/jEUIbQi-iuA&#34;&gt;answers&lt;/a&gt; about this. Most of these solutions revolve around using the &lt;code&gt;do&lt;/code&gt; function to calculate the quantiles on each of the groups. However, according to &lt;a href=&#34;https://community.rstudio.com/t/should-i-move-away-from-do-and-rowwise/2857/2&#34;&gt;Hadley&lt;/a&gt;, &lt;code&gt;do&lt;/code&gt; will eventually be “going away”. While there is no definite time frame on this, I try to use it as little as possible. The new recommended practice is a combination of &lt;code&gt;tidyr::nest&lt;/code&gt;, &lt;code&gt;dplyr::mutate&lt;/code&gt; and &lt;code&gt;purrr::map&lt;/code&gt; for most cases of grouping. I love this approach for most things (and it is even the accepted for one of &lt;a href=&#34;https://stackoverflow.com/questions/30488389/using-dplyr-window-functions-to-calculate-percentiles&#34;&gt;the SO questions mentioned above&lt;/a&gt;) but I worked up a new solution that I think is useful for calculating percentiles on multiple groups for any desired number of percentiles.&lt;/p&gt;
&lt;p&gt;This method uses &lt;code&gt;purrr::map&lt;/code&gt; and a &lt;a href=&#34;http://adv-r.had.co.nz/Function-operators.html&#34;&gt;Function Operator&lt;/a&gt;, &lt;a href=&#34;https://rdrr.io/cran/purrr/man/partial.html&#34;&gt;&lt;code&gt;purrr::partial&lt;/code&gt;&lt;/a&gt;, to create a list of functions that can than be applied to a data set using &lt;code&gt;dplyr::summarize_at&lt;/code&gt; and a little magic from &lt;code&gt;rlang&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let’s start by creating a vector of the desired percentiles to calculate. In this example, we will calculate the 20&lt;sup&gt;th&lt;/sup&gt;, 50&lt;sup&gt;th&lt;/sup&gt;, and 80&lt;sup&gt;th&lt;/sup&gt; percentiles.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p &amp;lt;- c(0.2, 0.5, 0.8)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can create a list of functions, with one for each quantile, using &lt;code&gt;purrr::map&lt;/code&gt; and &lt;code&gt;purrr::partial&lt;/code&gt;. We can also assign names to each function (useful for the output of &lt;code&gt;summarize&lt;/code&gt;) using &lt;code&gt;purrr::set_names&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p_names &amp;lt;- map_chr(p, ~paste0(.x*100, &amp;quot;%&amp;quot;))

p_funs &amp;lt;- map(p, ~partial(quantile, probs = .x, na.rm = TRUE)) %&amp;gt;% 
  set_names(nm = p_names)

p_funs&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $`20%`
## function (...) 
## quantile(probs = .x, na.rm = TRUE, ...)
## &amp;lt;environment: 0x7fcf50757430&amp;gt;
## 
## $`50%`
## function (...) 
## quantile(probs = .x, na.rm = TRUE, ...)
## &amp;lt;environment: 0x7fcf50762c30&amp;gt;
## 
## $`80%`
## function (...) 
## quantile(probs = .x, na.rm = TRUE, ...)
## &amp;lt;environment: 0x7fcf51148830&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Looking at &lt;code&gt;p_funs&lt;/code&gt; we can see that we have a named list with each element containing a function comprised of the &lt;code&gt;quantile&lt;/code&gt; function. The beauty of this is that you can use this list in the same way you would define multiple functions in any other &lt;code&gt;summarize_at&lt;/code&gt; or &lt;code&gt;summarize_all&lt;/code&gt; functions (i.e. &lt;code&gt;funs(mean, sd)&lt;/code&gt;). The only difference is that we will now have to use the “bang-bang-bang” operator (&lt;code&gt;!!!&lt;/code&gt;) from &lt;code&gt;rlang&lt;/code&gt; (it is also exported from &lt;code&gt;dplyr&lt;/code&gt;). The final product looks like this.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars %&amp;gt;% 
  group_by(cyl) %&amp;gt;% 
  summarize_at(vars(mpg), funs(!!!p_funs))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 4
##     cyl `20%` `50%` `80%`
##   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1     4  22.8  26    30.4
## 2     6  18.3  19.7  21  
## 3     8  13.9  15.2  16.8&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I think that this provides a pretty neat way to get the desired output in a format that does not require a large amount of post calculation manipulation. In addition, it is, in my opinion, more straightforward than a lot of the &lt;code&gt;do&lt;/code&gt; methods. This method also allows for quantiles to be calculated for more than one variable, although post-processing would be necessary in that case. Here is an example.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars %&amp;gt;% 
  group_by(cyl) %&amp;gt;% 
  summarize_at(vars(mpg, hp), funs(!!!p_funs)) %&amp;gt;% 
  select(cyl, contains(&amp;quot;mpg&amp;quot;), contains(&amp;quot;hp&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 7
##     cyl `mpg_20%` `mpg_50%` `mpg_80%` `hp_20%` `hp_50%` `hp_80%`
##   &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
## 1     4      22.8      26        30.4       65      91        97
## 2     6      18.3      19.7      21        110     110       123
## 3     8      13.9      15.2      16.8      175     192.      245&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;partial&lt;/code&gt; is &lt;em&gt;yet another&lt;/em&gt; tool from the &lt;code&gt;purrr&lt;/code&gt; package that can greatly enhance your R coding abilities. While this is surely a basic application of its functionality, one can easily see how powerful this function can be.&lt;/p&gt;
</description>
  </item>
  
<item>
  <title>Paper Published, Using Historical LCR and Water Quality Data to Evaluate Corrosion Control Treatment in JAWWA</title>
  <link>/2018/09/23/paper-published-using-historical-lcr-and-water-quality-data-to-evaluate-corrosion-control-treatment-in-jawwa/</link>
  <pubDate>Sun, 23 Sep 2018 00:00:00 +0000</pubDate>
  
<guid>/2018/09/23/paper-published-using-historical-lcr-and-water-quality-data-to-evaluate-corrosion-control-treatment-in-jawwa/</guid>
  <description>

&lt;p&gt;I am pleased to announce that my manuscript entitled &amp;ldquo;Using Historical LCR and Water Quality Data to Evaluate Corrosion Control Treatment&amp;rdquo; has been published in the upcoming issue of &lt;a href=&#34;https://awwa.onlinelibrary.wiley.com/journal/15518833&#34;&gt;Journal - American Water Works Association&lt;/a&gt; (&lt;a href=&#34;https://awwa.onlinelibrary.wiley.com/toc/15518833/0/0&#34;&gt;JAWWA October 2018&lt;/a&gt;). This article is a case study that explores the utility of historical LCR and water quality data to assess a drinking water distribution system&amp;rsquo;s corrosion control treatment progress.&lt;/p&gt;

&lt;p&gt;I would like to thank my co-author, Nicola Horscroft, who is the lead Project Engineer for the LCR sampling program for the Philadelphia Water Department (PWD).&lt;/p&gt;

&lt;p&gt;The article can be found from &lt;a href=&#34;https://doi.org/10.1002/awwa.1143&#34;&gt;JAWWA&lt;/a&gt;. This article demonstrates that a drinking water system that is in compliance with the Lead and Copper Rule (LCR) can use historical LCR and water quality data to demonstrate the progress of its Corrosion Control Treatment (CCT). This article explores PWD&amp;rsquo;s historical LCR data to demonstrate how treatment changes, primarily the addition of orthophosphate, have helped to reduce lead levels in the distribution system. In addition this article demonstrates several methods to parse through historical LCR data. One of these methods is using ridge plots to see how the distribution of lead levels has changed over the course of LCR regulatory sampling rounds.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;strong&gt;Distribution of lead results for each LCR sampling round&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/lcr-article-announcement/lcr-ridge-plot.png&#34; alt=&#34;&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h3 id=&#34;citation&#34;&gt;Citation&lt;/h3&gt;

&lt;p&gt;Bradley, Tyler, and Nicola Horscroft. “Using Historical LCR and Water Quality Data to Evaluate Corrosion Control Treatment.” &lt;em&gt;Journal - American Water Works Association&lt;/em&gt;, 21 Sept. 2018, &lt;a href=&#34;https://doi.org/10.1002/awwa.1143&#34;&gt;doi:10.1002/awwa.1143&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;abstract&#34;&gt;Abstract&lt;/h3&gt;

&lt;p&gt;Historical Lead and Copper Rule (LCR) regulatory sampling data from the Philadelphia Water Department were examined to explore their potential value for guiding a water utility&amp;rsquo;s progress with regard to optimal corrosion control treatment (OCCT). If a system has established a stable water treatment process with consistent corrosion control treatment (CCT) and has achieved continued decreases in lead levels during regulatory sampling, then the information collected during LCR monitoring can be used as an important data set of a broader OCCT evaluation and will help inform the benefit of additional changes in CCT. Since water utilities have LCR data dating back to 1992, these data should be used to make informed decisions. This research also showed that the addition of orthophosphate has resulted in a significant decrease in lead levels at the customer tap. Additionally, profile sampling was performed to show that first‐draw 1 L samples following a 6 h stagnation period provide a good representation of the lead concentrations measured from lead service line and home plumbing samples at the same sites and may be used to indicate overall changes in lead concentrations at the tap resulting from CCT for this system.&lt;/p&gt;
</description>
  </item>
  
<item>
  <title>Tracking Joey Wendle&#39;s rookie season with gganimate</title>
  <link>/2018/09/06/tracking-joey-wendle-rookie-season-with-gganimate/</link>
  <pubDate>Thu, 06 Sep 2018 00:00:00 +0000</pubDate>
  
<guid>/2018/09/06/tracking-joey-wendle-rookie-season-with-gganimate/</guid>
  <description>&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This past weekend I got the chance to go to the Tampa Bay Rays vs Cleveland Indians game. This game was a ton of fun, made even more exciting for me - and by the end of the game, the people in my section - because my brother-in-law’s brother (does that make him my brother-in-law too? No one ever knows for sure…), Joey Wendle, plays for the Rays! In case you haven’t been paying attention, Joey has been having a &lt;strong&gt;&lt;em&gt;MASSIVE&lt;/em&gt;&lt;/strong&gt; rookie season. Just take a look at some of the tweets from the Ray’s organization in the last few days.&lt;/p&gt;
&lt;center&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;
&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;
The AL&#39;s top-hitting rookie is on a record pace.&lt;a href=&#34;https://twitter.com/hashtag/RaysUp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#RaysUp&lt;/a&gt; &lt;a href=&#34;https://t.co/2oo88IXS2f&#34;&gt;pic.twitter.com/2oo88IXS2f&lt;/a&gt;
&lt;/p&gt;
— Tampa Bay Rays (&lt;span class=&#34;citation&#34;&gt;@RaysBaseball&lt;/span&gt;) &lt;a href=&#34;https://twitter.com/RaysBaseball/status/1037098037120823297?ref_src=twsrc%5Etfw&#34;&gt;September 4, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;
&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;
How many ways can one man impact a game?&lt;a href=&#34;https://twitter.com/hashtag/RaysUp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#RaysUp&lt;/a&gt; &lt;a href=&#34;https://t.co/iE3izrtc70&#34;&gt;pic.twitter.com/iE3izrtc70&lt;/a&gt;
&lt;/p&gt;
— Tampa Bay Rays (&lt;span class=&#34;citation&#34;&gt;@RaysBaseball&lt;/span&gt;) &lt;a href=&#34;https://twitter.com/RaysBaseball/status/1036398948502695937?ref_src=twsrc%5Etfw&#34;&gt;September 2, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;/center&gt;
&lt;p&gt;As you can see, the man has been getting it done at the plate and in the field. This has led some to call for his inclusion in the AL Rookie of the Year conversation.&lt;/p&gt;
&lt;center&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;
&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;
&lt;a href=&#34;https://twitter.com/hashtag/Rays?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Rays&lt;/a&gt; Joey Wendle put on a show on Sunday and it’s time to start talking about him as a legit AL Rookie of the Year contender: &lt;a href=&#34;https://t.co/G9sFvLLeLq&#34;&gt;https://t.co/G9sFvLLeLq&lt;/a&gt;
&lt;/p&gt;
— Juan Toribio (&lt;span class=&#34;citation&#34;&gt;@juanctoribio&lt;/span&gt;) &lt;a href=&#34;https://twitter.com/juanctoribio/status/1036449226732064773?ref_src=twsrc%5Etfw&#34;&gt;September 3, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;/center&gt;
&lt;p&gt;I have been looking for a good excuse to play around with &lt;a href=&#34;https://www.data-imaginist.com/&#34;&gt;Thomas Pedersen’s&lt;/a&gt; &lt;a href=&#34;https://github.com/thomasp85/gganimate&#34;&gt;&lt;code&gt;gganimate&lt;/code&gt;&lt;/a&gt; package, and what better way then by taking a look at Joey’s rookie season.&lt;/p&gt;
&lt;p&gt;Before we start, let’s load the R packages that we will use.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
# devtools::install_github(&amp;quot;BillPetti/baseballr&amp;quot;)
library(baseballr)
# devtools::install_github(&amp;quot;thomasp85/gganimate&amp;quot;)
library(gganimate)
library(lubridate)
library(fuzzyjoin) # for position graph&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;getting-the-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Getting the data&lt;/h1&gt;
&lt;p&gt;There are several sources of MLB data available on the internet, and the &lt;a href=&#34;https://github.com/BillPetti/baseballr&#34;&gt;&lt;code&gt;baseballr&lt;/code&gt;&lt;/a&gt; package by &lt;a href=&#34;https://billpetti.github.io/&#34;&gt;Bill Petti&lt;/a&gt; makes getting this data super easy. The sources of data that I will use in this post are from the &lt;a href=&#34;http://baseballsavant.mlb.com&#34;&gt;Baseball Savant&lt;/a&gt; website for batting data and &lt;a href=&#34;https://www.FanGraphs.com&#34;&gt;Fan Graphs&lt;/a&gt; for fielding position. These sites both provide game by game data for any player in the league for any season. The Baseball Savant site provides pitch by pitch data about each of Joey’s at-bats and the Fan Graphs site provides game by game stats.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;baseballr&lt;/code&gt; provides different functions for the different data sources, but first we will have to get Joey’s player id from these sites. We can use the &lt;code&gt;playerid_lookup&lt;/code&gt; function to find it.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;playerid_lookup(&amp;quot;Wendle&amp;quot;, &amp;quot;Joey&amp;quot;) %&amp;gt;% glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Observations: 1
## Variables: 11
## $ first_name       &amp;lt;chr&amp;gt; &amp;quot;Joey&amp;quot;
## $ last_name        &amp;lt;chr&amp;gt; &amp;quot;Wendle&amp;quot;
## $ given_name       &amp;lt;chr&amp;gt; &amp;quot;Joseph Patrick&amp;quot;
## $ name_suffix      &amp;lt;chr&amp;gt; NA
## $ nick_name        &amp;lt;chr&amp;gt; NA
## $ birth_year       &amp;lt;int&amp;gt; 1990
## $ mlb_played_first &amp;lt;int&amp;gt; 2016
## $ mlbam_id         &amp;lt;int&amp;gt; 621563
## $ retrosheet_id    &amp;lt;chr&amp;gt; &amp;quot;wendj002&amp;quot;
## $ bbref_id         &amp;lt;chr&amp;gt; &amp;quot;wendljo01&amp;quot;
## $ fangraphs_id     &amp;lt;int&amp;gt; 13853&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can look up both the Fan Graphs and Baseball Savant data. From the above we can see that his Fan Graphs id is “13853”.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;joey_fg &amp;lt;- baseballr::batter_game_logs_fg(&amp;quot;13853&amp;quot;, year = 2018)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;joey_fg %&amp;gt;% as_tibble()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 119 x 23
##    Date  Team  Opp   BO    Pos   PA    H     X2B   X3B   HR    R     RBI  
##    &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;
##  1 2018~ TBR   @TOR  4     2B    4     0     0     0     0     0     0    
##  2 2018~ TBR   @TOR  5     2B    4     0     0     0     0     0     0    
##  3 2018~ TBR   @TOR  5     SS-3B 4     3     1     0     0     1     0    
##  4 2018~ TBR   @CLE  1     3B    5     2     1     0     0     1     1    
##  5 2018~ TBR   @CLE  1     2B    5     2     1     0     0     1     0    
##  6 2018~ TBR   @CLE  1     2B    4     1     0     0     0     0     0    
##  7 2018~ TBR   @ATL  5     2B    5     2     0     0     0     2     2    
##  8 2018~ TBR   @ATL  1     2B    5     2     0     0     0     1     0    
##  9 2018~ TBR   BOS   1     2B    5     2     1     0     0     1     0    
## 10 2018~ TBR   BOS   1     2B    5     2     0     0     0     0     1    
## # ... with 109 more rows, and 11 more variables: SB &amp;lt;chr&amp;gt;, CS &amp;lt;chr&amp;gt;,
## #   BB_perc &amp;lt;dbl&amp;gt;, K_perc &amp;lt;dbl&amp;gt;, ISO &amp;lt;chr&amp;gt;, BABIP &amp;lt;chr&amp;gt;, AVG &amp;lt;chr&amp;gt;,
## #   OBP &amp;lt;chr&amp;gt;, SLG &amp;lt;chr&amp;gt;, wOBA &amp;lt;chr&amp;gt;, wRC_plus &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can do the same with the Baseball Savant data using the corresponding player id - “621563”&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;joey_bsvnt &amp;lt;- scrape_statcast_savant_batter(start_date = &amp;quot;2018-03-29&amp;quot;, end_date = Sys.Date(), batterid = &amp;quot;621563&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;joey_bsvnt %&amp;gt;% as_tibble()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1,687 x 90
##    pitch_type game_date  release_speed release_pos_x release_pos_z
##    &amp;lt;chr&amp;gt;      &amp;lt;date&amp;gt;             &amp;lt;dbl&amp;gt;         &amp;lt;dbl&amp;gt;         &amp;lt;dbl&amp;gt;
##  1 SI         2018-09-05          92.5         -2.44          5.48
##  2 SI         2018-09-05          93.2         -2.39          5.70
##  3 CH         2018-09-05          88.4         -2.03          5.53
##  4 CU         2018-09-05          78.5         -1.87          5.67
##  5 CU         2018-09-05          80.6         -1.98          5.63
##  6 CU         2018-09-05          79.3         -1.92          5.65
##  7 CU         2018-09-05          78.1         -2.02          5.69
##  8 FT         2018-09-05          92.3         -1.90          5.69
##  9 CH         2018-09-05          89.3         -1.92          5.57
## 10 FT         2018-09-05          93.9         -1.88          5.60
## # ... with 1,677 more rows, and 85 more variables: player_name &amp;lt;chr&amp;gt;,
## #   batter &amp;lt;int&amp;gt;, pitcher &amp;lt;int&amp;gt;, events &amp;lt;chr&amp;gt;, description &amp;lt;chr&amp;gt;,
## #   spin_dir &amp;lt;chr&amp;gt;, spin_rate_deprecated &amp;lt;chr&amp;gt;,
## #   break_angle_deprecated &amp;lt;chr&amp;gt;, break_length_deprecated &amp;lt;chr&amp;gt;,
## #   zone &amp;lt;int&amp;gt;, des &amp;lt;chr&amp;gt;, game_type &amp;lt;chr&amp;gt;, stand &amp;lt;chr&amp;gt;, p_throws &amp;lt;chr&amp;gt;,
## #   home_team &amp;lt;chr&amp;gt;, away_team &amp;lt;chr&amp;gt;, type &amp;lt;chr&amp;gt;, hit_location &amp;lt;int&amp;gt;,
## #   bb_type &amp;lt;chr&amp;gt;, balls &amp;lt;int&amp;gt;, strikes &amp;lt;int&amp;gt;, game_year &amp;lt;int&amp;gt;,
## #   pfx_x &amp;lt;dbl&amp;gt;, pfx_z &amp;lt;dbl&amp;gt;, plate_x &amp;lt;dbl&amp;gt;, plate_z &amp;lt;dbl&amp;gt;, on_3b &amp;lt;dbl&amp;gt;,
## #   on_2b &amp;lt;dbl&amp;gt;, on_1b &amp;lt;dbl&amp;gt;, outs_when_up &amp;lt;int&amp;gt;, inning &amp;lt;int&amp;gt;,
## #   inning_topbot &amp;lt;chr&amp;gt;, hc_x &amp;lt;dbl&amp;gt;, hc_y &amp;lt;dbl&amp;gt;, tfs_deprecated &amp;lt;chr&amp;gt;,
## #   tfs_zulu_deprecated &amp;lt;chr&amp;gt;, pos2_person_id &amp;lt;int&amp;gt;, umpire &amp;lt;chr&amp;gt;,
## #   sv_id &amp;lt;chr&amp;gt;, vx0 &amp;lt;dbl&amp;gt;, vy0 &amp;lt;dbl&amp;gt;, vz0 &amp;lt;dbl&amp;gt;, ax &amp;lt;dbl&amp;gt;, ay &amp;lt;dbl&amp;gt;,
## #   az &amp;lt;dbl&amp;gt;, sz_top &amp;lt;dbl&amp;gt;, sz_bot &amp;lt;dbl&amp;gt;, hit_distance_sc &amp;lt;int&amp;gt;,
## #   launch_speed &amp;lt;dbl&amp;gt;, launch_angle &amp;lt;dbl&amp;gt;, effective_speed &amp;lt;dbl&amp;gt;,
## #   release_spin_rate &amp;lt;int&amp;gt;, release_extension &amp;lt;dbl&amp;gt;, game_pk &amp;lt;int&amp;gt;,
## #   pos1_person_id &amp;lt;int&amp;gt;, pos2_person_id_1 &amp;lt;int&amp;gt;, pos3_person_id &amp;lt;int&amp;gt;,
## #   pos4_person_id &amp;lt;int&amp;gt;, pos5_person_id &amp;lt;int&amp;gt;, pos6_person_id &amp;lt;int&amp;gt;,
## #   pos7_person_id &amp;lt;int&amp;gt;, pos8_person_id &amp;lt;int&amp;gt;, pos9_person_id &amp;lt;int&amp;gt;,
## #   release_pos_y &amp;lt;dbl&amp;gt;, estimated_ba_using_speedangle &amp;lt;dbl&amp;gt;,
## #   estimated_woba_using_speedangle &amp;lt;dbl&amp;gt;, woba_value &amp;lt;dbl&amp;gt;,
## #   woba_denom &amp;lt;int&amp;gt;, babip_value &amp;lt;int&amp;gt;, iso_value &amp;lt;int&amp;gt;,
## #   launch_speed_angle &amp;lt;int&amp;gt;, at_bat_number &amp;lt;int&amp;gt;, pitch_number &amp;lt;int&amp;gt;,
## #   pitch_name &amp;lt;chr&amp;gt;, home_score &amp;lt;int&amp;gt;, away_score &amp;lt;int&amp;gt;, bat_score &amp;lt;int&amp;gt;,
## #   fld_score &amp;lt;int&amp;gt;, post_away_score &amp;lt;int&amp;gt;, post_home_score &amp;lt;int&amp;gt;,
## #   post_bat_score &amp;lt;int&amp;gt;, post_fld_score &amp;lt;int&amp;gt;,
## #   if_fielding_alignment &amp;lt;chr&amp;gt;, of_fielding_alignment &amp;lt;chr&amp;gt;, barrel &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While the baseball savant data has a ton of information, it does not have stats per game or cumulative stats for the season. However, using the data that we have, these things can be calculated easily! To do this, we will define a custom function to calculate a few standard sabermetrics (i.e. batting average, slugging, on base percentage, etc.).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;savant_daily &amp;lt;- function(data){
  output &amp;lt;- data %&amp;gt;% 
    filter(!is.na(events), events != &amp;quot;caught_stealing_2b&amp;quot;) %&amp;gt;% 
    mutate(
      is_ab = if_else(
        events %in% c(&amp;quot;strikeout&amp;quot;, &amp;quot;field_out&amp;quot;, &amp;quot;single&amp;quot;, &amp;quot;double&amp;quot;, &amp;quot;force_out&amp;quot;, 
                      &amp;quot;triple&amp;quot;, &amp;quot;home_run&amp;quot;, &amp;quot;double_play&amp;quot;, &amp;quot;field_error&amp;quot;, &amp;quot;grounded_into_double_play&amp;quot;,
                      &amp;quot;strikeout_double_play&amp;quot;, &amp;quot;fielders_choice_out&amp;quot;),
        TRUE,
        FALSE
      ),
      is_hit = if_else(
        events %in% c(&amp;quot;single&amp;quot;, &amp;quot;double&amp;quot;, &amp;quot;triple&amp;quot;, &amp;quot;home_run&amp;quot;), TRUE, FALSE
      ),
      bases = case_when(
        events == &amp;quot;single&amp;quot; ~ 1,
        events == &amp;quot;double&amp;quot; ~ 2,
        events == &amp;quot;triple&amp;quot; ~ 3,
        events == &amp;quot;home_run&amp;quot; ~ 4,
        TRUE ~ 0
      ),
      event_custom = case_when(
        events %in% c(&amp;quot;single&amp;quot;, &amp;quot;double&amp;quot;, &amp;quot;triple&amp;quot;, &amp;quot;home_run&amp;quot;) ~ events, 
        str_detect(events, &amp;quot;sac&amp;quot;) ~ &amp;quot;sacrifice&amp;quot;,
        events %in% c(&amp;quot;walk&amp;quot;, &amp;quot;hit_by_pitch&amp;quot;) ~ NA_character_,
        events == &amp;quot;field_error&amp;quot; ~ &amp;quot;error&amp;quot;,
        TRUE ~ &amp;quot;out&amp;quot;
      )
    ) %&amp;gt;% 
    group_by(game_date) %&amp;gt;% 
    summarize(
      pa = length(unique(at_bat_number)),
      ab = sum(is_ab),
      hits = sum(is_hit),
      doubles = sum(events == &amp;quot;double&amp;quot;),
      triples = sum(events == &amp;quot;triples&amp;quot;),
      home_runs = sum(events == &amp;quot;home_run&amp;quot;),
      bb = sum(events == &amp;quot;walk&amp;quot;),
      hbp = sum(events == &amp;quot;hit_by_pitch&amp;quot;),
      so = sum(events %in% c(&amp;quot;strikeout&amp;quot;, &amp;quot;strikeout_double_play&amp;quot;)),
      bases = sum(bases)
    ) %&amp;gt;% 
    arrange(game_date) %&amp;gt;% 
    mutate(
      ba = round(hits/ab, 3),
      obp = round((hits + bb + hbp)/(ab + bb + hbp), 3),
      slg = round(bases/ab, 3),
      ops = obp + slg,
      hits_to_date = cumsum(hits),
      bb_to_date = cumsum(bb),
      hbp_to_date = cumsum(hbp),
      ab_to_date = cumsum(ab),
      bases_to_date = cumsum(bases),
      ba_to_date = round(hits_to_date/ab_to_date, 3),
      obp_to_date = round(
        (hits_to_date + bb_to_date + hbp_to_date)/(ab_to_date + bb_to_date + hbp_to_date), 3
      ),
      slg_to_date = round(bases_to_date/ab_to_date, 3),
      ops_to_date = obp_to_date + slg_to_date
    )
  
  return(output)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;joey_bsvnt_daily &amp;lt;- savant_daily(joey_bsvnt)

joey_bsvnt_daily %&amp;gt;% glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Observations: 117
## Variables: 24
## $ game_date     &amp;lt;date&amp;gt; 2018-03-29, 2018-03-30, 2018-03-31, 2018-04-01,...
## $ pa            &amp;lt;int&amp;gt; 1, 1, 4, 4, 3, 1, 3, 2, 5, 6, 4, 4, 4, 4, 4, 2, ...
## $ ab            &amp;lt;int&amp;gt; 1, 1, 3, 4, 3, 1, 3, 2, 5, 3, 3, 4, 3, 2, 3, 2, ...
## $ hits          &amp;lt;int&amp;gt; 0, 0, 0, 2, 0, 1, 2, 1, 2, 1, 0, 0, 1, 0, 0, 1, ...
## $ doubles       &amp;lt;int&amp;gt; 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, ...
## $ triples       &amp;lt;int&amp;gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...
## $ home_runs     &amp;lt;int&amp;gt; 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, ...
## $ bb            &amp;lt;int&amp;gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 1, 1, 1, 0, ...
## $ hbp           &amp;lt;int&amp;gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, ...
## $ so            &amp;lt;int&amp;gt; 0, 0, 2, 0, 0, 0, 1, 0, 1, 2, 1, 2, 0, 1, 0, 1, ...
## $ bases         &amp;lt;dbl&amp;gt; 0, 0, 0, 3, 0, 1, 3, 3, 5, 1, 0, 0, 2, 0, 0, 1, ...
## $ ba            &amp;lt;dbl&amp;gt; 0.000, 0.000, 0.000, 0.500, 0.000, 1.000, 0.667,...
## $ obp           &amp;lt;dbl&amp;gt; 0.000, 0.000, 0.000, 0.500, 0.000, 1.000, 0.667,...
## $ slg           &amp;lt;dbl&amp;gt; 0.000, 0.000, 0.000, 0.750, 0.000, 1.000, 1.000,...
## $ ops           &amp;lt;dbl&amp;gt; 0.000, 0.000, 0.000, 1.250, 0.000, 2.000, 1.667,...
## $ hits_to_date  &amp;lt;int&amp;gt; 0, 0, 0, 2, 2, 3, 5, 6, 8, 9, 9, 9, 10, 10, 10, ...
## $ bb_to_date    &amp;lt;int&amp;gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 5, 6, 7, 7, ...
## $ hbp_to_date   &amp;lt;int&amp;gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, ...
## $ ab_to_date    &amp;lt;int&amp;gt; 1, 2, 5, 9, 12, 13, 16, 18, 23, 26, 29, 33, 36, ...
## $ bases_to_date &amp;lt;dbl&amp;gt; 0, 0, 0, 3, 3, 4, 7, 10, 15, 16, 16, 16, 18, 18,...
## $ ba_to_date    &amp;lt;dbl&amp;gt; 0.000, 0.000, 0.000, 0.222, 0.167, 0.231, 0.312,...
## $ obp_to_date   &amp;lt;dbl&amp;gt; 0.000, 0.000, 0.000, 0.222, 0.167, 0.231, 0.312,...
## $ slg_to_date   &amp;lt;dbl&amp;gt; 0.000, 0.000, 0.000, 0.333, 0.250, 0.308, 0.438,...
## $ ops_to_date   &amp;lt;dbl&amp;gt; 0.000, 0.000, 0.000, 0.555, 0.417, 0.539, 0.750,...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;fielding-positions&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Fielding Positions&lt;/h1&gt;
&lt;p&gt;Joey started the season sharing second base duties and was not used in many other positions. However, as the season has progressed, the Rays have given him opportunities at several other positions and Joey has stepped up every time. I mean, just look at those web gems in the tweet at the beginning of this post! Seriously, go watch them again, I will wait…&lt;/p&gt;
&lt;p&gt;As a first stab at &lt;code&gt;gganimate&lt;/code&gt;, let’s take a look at where Joey has played each game with the help of &lt;code&gt;baseballr&lt;/code&gt;’s &lt;code&gt;ggspraychart&lt;/code&gt; function. First, we can define coordinates (relative to &lt;code&gt;ggspraycharts&lt;/code&gt; field definition) for each of the positions that he has played.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;position_loc &amp;lt;- tribble(
  ~position, ~x, ~y, 
  &amp;quot;2B&amp;quot;, 145, -145,
  &amp;quot;3B&amp;quot;, 100, -160,
  &amp;quot;SS&amp;quot;, 111, -144,
  &amp;quot;LF&amp;quot;, 80, -100,
  &amp;quot;RF&amp;quot;, 176, -100
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since Joey has played multiple positions in single games, a simple left join is not entirely appropriate. Using the &lt;a href=&#34;https://github.com/dgrtwo/fuzzyjoin&#34;&gt;&lt;code&gt;fuzzyjoin&lt;/code&gt;&lt;/a&gt; package, we can match the position coordinates with the positions that are defined in the &lt;code&gt;joey_fg&lt;/code&gt; data set by regex.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;joey_position &amp;lt;- joey_fg %&amp;gt;% 
  fuzzyjoin::regex_left_join(position_loc, by = c(&amp;quot;Pos&amp;quot; = &amp;quot;position&amp;quot;)) %&amp;gt;% 
  mutate(Date = lubridate::ymd(Date))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, using the &lt;code&gt;ggspraychart&lt;/code&gt; and the &lt;code&gt;transition_time&lt;/code&gt; function, we can see how his position has changed with each day.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;position_chart &amp;lt;- joey_position %&amp;gt;% 
  filter(!is.na(position)) %&amp;gt;% 
  ggspraychart(x_value = &amp;quot;x&amp;quot;, y_value = &amp;quot;y&amp;quot;, fill_value = &amp;quot;position&amp;quot;) + 
  scale_fill_manual(values = c(&amp;quot;2B&amp;quot; = &amp;quot;red&amp;quot;, &amp;quot;3B&amp;quot; = &amp;quot;blue&amp;quot;,
                               &amp;quot;SS&amp;quot; = &amp;quot;green&amp;quot;, &amp;quot;LF&amp;quot; = &amp;quot;yellow&amp;quot;, 
                               &amp;quot;RF&amp;quot; = &amp;quot;black&amp;quot;), na.translate = FALSE) + 
  labs(title = &amp;quot;Joey Wendle 2018 position by game:{frame_time}&amp;quot;,
       caption = &amp;quot;Data source: fangraphs.com\nBuilt with the baseballr package\n&amp;quot;) + 
  transition_time(Date) + 
  theme(
    legend.title = element_blank(),
    plot.title = element_text(size = 14),
    plot.caption = element_text(size = 10, face = &amp;quot;bold&amp;quot;),
    legend.text = element_text(size = 12, face = &amp;quot;bold&amp;quot;)
  )

animate(position_chart, width = 800, height = 800)&lt;/code&gt;&lt;/pre&gt;
&lt;center&gt;
&lt;img src=&#34;/images/joey-rookie/position-chart.gif&#34; /&gt;
&lt;/center&gt;
&lt;p&gt;As this animation shows, he has been moved around the field much more towards the end of the year!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;batting&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Batting&lt;/h1&gt;
&lt;p&gt;Now let’s use the &lt;code&gt;ggspraychart&lt;/code&gt; to see how Joey’s hits have accumulated over the course of the season and where he tends to hit the ball. For this, we will use the raw baseball savant data set &lt;code&gt;joey_bsvnt&lt;/code&gt; and use the function &lt;code&gt;transition_reveal&lt;/code&gt;. This function allows for data to be added over a range rather than only showing the data for a specific date.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;joey_spray &amp;lt;- joey_bsvnt %&amp;gt;% 
  filter(events %in% c(&amp;quot;single&amp;quot;, &amp;quot;double&amp;quot;, &amp;quot;triple&amp;quot;, &amp;quot;home_run&amp;quot;)) %&amp;gt;% 
  mutate(events = factor(events, levels = c(&amp;quot;single&amp;quot;, &amp;quot;double&amp;quot;, &amp;quot;triple&amp;quot;, &amp;quot;home_run&amp;quot;),
                         labels = c(&amp;quot;Single&amp;quot;, &amp;quot;Double&amp;quot;, &amp;quot;Triple&amp;quot;, &amp;quot;Home Run&amp;quot;))) %&amp;gt;% 
  ggspraychart(fill_value = &amp;quot;events&amp;quot;, 
               fill_palette = c(&amp;quot;Single&amp;quot;=&amp;quot;#A2C8EC&amp;quot;, &amp;quot;Double&amp;quot;=&amp;quot;#006BA4&amp;quot;, 
                                &amp;quot;Triple&amp;quot;=&amp;quot;#FF940E&amp;quot;, &amp;quot;Home Run&amp;quot;=&amp;quot;#C85200&amp;quot;)) + 
  labs(title = &amp;quot;Joey Wendle 2018 hits to date: {frame_time}&amp;quot;,
       caption = &amp;quot;Data source: baseballsavant.com\nBuilt with the baseballr package\n&amp;quot;) + 
  transition_reveal(game_date, game_date) + 
  theme(
    legend.title = element_blank(),
    plot.title = element_text(size = 14),
    plot.caption = element_text(size = 10, face = &amp;quot;bold&amp;quot;),
    legend.text = element_text(size = 12, face = &amp;quot;bold&amp;quot;)
  )


animate(joey_spray, width = 800, height = 800)&lt;/code&gt;&lt;/pre&gt;
&lt;center&gt;
&lt;img src=&#34;/images/joey-rookie/spray-anim.gif&#34; /&gt;
&lt;/center&gt;
&lt;p&gt;From this animation, Joey seems to hit most of his home runs to right field, but other than that he seems to spread his hits all around the field.&lt;/p&gt;
&lt;p&gt;Let’s take a look at how Joey’s batting average has changed over time. We can use the daily statistics we calculated earlier to see how it changes over time using the &lt;code&gt;transition_reveal&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;joey_rbi &amp;lt;- joey_bsvnt_daily %&amp;gt;% 
  ggplot(aes(game_date, ba_to_date)) + 
  geom_step(size = 1.5) + 
  theme_bw() + 
  labs(
    y = &amp;quot;Batting Average&amp;quot;,
    title = &amp;quot;Joey Wendle&amp;#39;s batting average during the 2018 season&amp;quot;,
    caption = &amp;quot;Data source: baseballsavant.com\n&amp;quot;
  ) + 
  scale_x_date(date_breaks = &amp;quot;2 weeks&amp;quot;, date_labels = &amp;quot;%B %d, %Y&amp;quot;) + 
  scale_y_continuous(breaks = seq(0, 0.35, 0.05)) + 
  theme(
    plot.title = element_text(size = 14, face = &amp;quot;bold&amp;quot;),
    plot.caption = element_text(size = 10, face = &amp;quot;bold&amp;quot;),
    axis.title.x = element_blank(),
    axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, face = &amp;quot;bold&amp;quot;),
    axis.text.y = element_text(face = &amp;quot;bold&amp;quot;)
  ) + 
  transition_reveal(id = game_date, along = game_date) 


animate(joey_rbi, width = 800, height = 600)&lt;/code&gt;&lt;/pre&gt;
&lt;center&gt;
&lt;img src=&#34;/images/joey-rookie/rbi-anim.gif&#34; /&gt;
&lt;/center&gt;
&lt;p&gt;As we can see, Joey has stayed fairly consistent between 0.275 and 0.300 and has only been improving since the all-star break. Using the same functionality, we can look at multiple stats all at once by simply faceting the graphs. Here we can see how his batting average, slugging percentage and on-base percentage have changed over the course of the season.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;multi_stats &amp;lt;- joey_bsvnt_daily %&amp;gt;% 
  select(game_date, ba_to_date, slg_to_date, obp_to_date) %&amp;gt;% 
  gather(key = &amp;quot;metric&amp;quot;, value = &amp;quot;value&amp;quot;, -game_date) %&amp;gt;% 
  mutate(metric = case_when(
    metric == &amp;quot;ba_to_date&amp;quot; ~ &amp;quot;Batting Average&amp;quot;,
    metric == &amp;quot;slg_to_date&amp;quot; ~ &amp;quot;Slugging&amp;quot;,
    metric == &amp;quot;obp_to_date&amp;quot; ~ &amp;quot;On-base Percentage&amp;quot;
  )) %&amp;gt;% 
  ggplot(aes(game_date, value)) + 
  geom_step(size = 1.5) + 
  facet_wrap(vars(metric), scales = &amp;quot;free_y&amp;quot;, ncol = 1) + 
  theme_bw() + 
  scale_x_date(date_breaks = &amp;quot;2 week&amp;quot;, date_labels = &amp;quot;%B %d, %Y&amp;quot;) + 
  theme(
    plot.title = element_text(size = 14, face = &amp;quot;bold&amp;quot;),
    plot.caption = element_text(size = 10, face = &amp;quot;bold&amp;quot;),
    axis.title = element_blank(),
    axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, face = &amp;quot;bold&amp;quot;),
    axis.text.y = element_text(face = &amp;quot;bold&amp;quot;)
  ) + 
  labs(
   title = &amp;quot;Joey Wendle&amp;#39;s batting average, slugging, and on-base percentage, respectively&amp;quot;,
   caption = &amp;quot;Data source: baseballsavant.com\n&amp;quot;
  ) + 
  transition_reveal(game_date, game_date)

animate(multi_stats, width = 800, height = 1000)&lt;/code&gt;&lt;/pre&gt;
&lt;center&gt;
&lt;img src=&#34;/images/joey-rookie/multi-stats.gif&#34; /&gt;
&lt;/center&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Joey is having a breakout year and the &lt;code&gt;gganimate&lt;/code&gt; package gives us a cool way of viewing his progress over the course of the season. I hope you enjoyed the examples and I hope you root for Joey to finish off the year strong!&lt;/p&gt;
&lt;p&gt;Please let me know what you think!&lt;/p&gt;
&lt;/div&gt;
</description>
  </item>
  
<item>
  <title>Add RStudio Community to your blogs social links - Blackburn Theme</title>
  <link>/2018/08/24/add-rstudio-community-to-your-blogs-social-links/</link>
  <pubDate>Fri, 24 Aug 2018 00:00:00 +0000</pubDate>
  
<guid>/2018/08/24/add-rstudio-community-to-your-blogs-social-links/</guid>
  <description>&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Recently, I switched themes for my blog to the &lt;a href=&#34;https://github.com/yoshiharuyamashita/blackburn&#34;&gt;blackburn&lt;/a&gt; theme and I love it! Luckily, the &lt;a href=&#34;https://github.com/rstudio/blogdown&#34;&gt;&lt;code&gt;blogdown&lt;/code&gt;&lt;/a&gt; package makes this super easy to do within R! If you haven’t used &lt;code&gt;blogdown&lt;/code&gt;, I &lt;strong&gt;&lt;em&gt;highly&lt;/em&gt;&lt;/strong&gt; recommend you take a look at it for setting up your blog. One of the nice features of the blackburn theme, is that it provides easy to add “social” tags that can be configured in your &lt;code&gt;config.toml&lt;/code&gt; file. The built in social tags all come with nice &lt;a href=&#34;https://fontawesome.com/&#34;&gt;font-awesome&lt;/a&gt; icons to their left.&lt;/p&gt;
&lt;p&gt;However, one of the social media sites that I visit the most is not included on the provided sites, and that is &lt;a href=&#34;https://community.rstudio.com/&#34;&gt;RStudio Community&lt;/a&gt;! RStudio Community is a web-forum that is hosted by RStudio to provide community Q and A for all things related to R, RStudio products, and packages provided by RStudio. If you haven’t been there before, I highly recommend that you check it out! Since this site is not included in blackburn’s social links, I had to add it myself. This post will walk through how to edit the blackburn theme to include custom social links, specifically for RStudio Community.&lt;/p&gt;
&lt;p&gt;This post assumes that you have already successfully set up your blog using the &lt;code&gt;blackburn&lt;/code&gt; theme. If not, you should check out a few of these links:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;a href=&#34;https://bookdown.org/yihui/blogdown/&#34;&gt;Blogdown book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://themes.gohugo.io/blackburn/&#34;&gt;Blackburn Theme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mltconsecol.github.io/post/20170123_blogdown_hugo/&#34;&gt;Blog post using blogdown setup with blackburn theme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tclavelle.github.io/blog/blogdown_github/&#34;&gt;Blog post about blogdown setup in general&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-the-icon&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Creating the icon&lt;/h1&gt;
&lt;p&gt;As mentioned above, all of the icons included next to the default social links are added via font-awesome. Unfortunately, neither RStudio or RStudio Community have a font awesome icon, as of this writing. So before we add the link to our social list, we will have to create our own icon (or in this case, simply an image) for this item. This can be done with a little help from the &lt;a href=&#34;https://github.com/ropensci/magick&#34;&gt;&lt;code&gt;magick&lt;/code&gt;&lt;/a&gt; package.&lt;/p&gt;
&lt;p&gt;The image we are going to use is the same one used as the favicon when you open RStudio Community. If you don’t know what a favicon is, it is simply the image that you see on the left hand side of a browser tab. To get this image, we can use the &lt;code&gt;image_read&lt;/code&gt; function. Before we do that, let’s load the packages that&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(magrittr)
library(magick)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To load the image we can use the following command&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;community_icon_orig &amp;lt;- image_read(&amp;quot;https://www.rstudio.com/wp-content/uploads/2018/03/community-favicon-512.png&amp;quot;)

community_icon_orig&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-08-23-add-rstudio-community-to-your-blogs-social-links_files/figure-html/load-image-1.png&#34; width=&#34;256&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Right now the image looks great, but we want our icon to be gray scaled to match the other icons on the social link. We can do this with just a little &lt;code&gt;magick&lt;/code&gt;! First, we will create a background icon that is simply the RStudio Community icon shape in all black. This is because the inner portion of the other social icons is a black color (&lt;code&gt;#191818&lt;/code&gt; to be exact) and the community icon is white when we first load it. Using &lt;code&gt;image_composite&lt;/code&gt;, in conjunction with &lt;code&gt;image_channel&lt;/code&gt; (to convert to gray scale) and &lt;code&gt;image_transparent&lt;/code&gt; (to remove the square background created by &lt;code&gt;image_channel&lt;/code&gt;) we can superimpose the black background over the white portions of the icon. You can create the background for the icon like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;icon_background &amp;lt;- community_icon_orig %&amp;gt;% 
  image_channel(channel = &amp;quot;Gray&amp;quot;) %&amp;gt;% 
  image_transparent(color = &amp;quot;black&amp;quot;) %&amp;gt;% 
  image_composite(image_blank(512, 512, &amp;quot;#191818&amp;quot;), &amp;quot;In&amp;quot;)

icon_background&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-08-23-add-rstudio-community-to-your-blogs-social-links_files/figure-html/icon-background-1.png&#34; width=&#34;256&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now that we have the background to use it in our &lt;code&gt;image_composite&lt;/code&gt; function to create our final community icon with a gray outer portion and a black &lt;code&gt;R&lt;/code&gt; in the center. This is what the final icon will look like!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;community_icon &amp;lt;- community_icon_orig %&amp;gt;% 
  image_channel(channel = &amp;quot;Gray&amp;quot;) %&amp;gt;% 
  image_transparent(color = &amp;quot;black&amp;quot;) %&amp;gt;% 
  image_composite(icon_background, &amp;quot;Subtract&amp;quot;) 

community_icon&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-08-23-add-rstudio-community-to-your-blogs-social-links_files/figure-html/manipulate-image-1.png&#34; width=&#34;256&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now we just need to save our image to our blogdown repository. This image should be saved in the &lt;code&gt;static/images/&lt;/code&gt; folder of your blogdown repository. Saving it in this location will allow for us to add it to the blogs menu from any location. We will also scale our image to a width and height of 14px&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;community_icon %&amp;gt;% 
  image_scale(&amp;quot;14&amp;quot;) %&amp;gt;% 
  image_write(&amp;quot;static/images/community-icon.png&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;adding-the-icon-to-social-list&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Adding the Icon to Social List&lt;/h1&gt;
&lt;p&gt;The blackburn theme provides easy to configure social links via HMTL partials. This allows users to enter their socials links like this in their &lt;code&gt;config.toml&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[social]
  twitter = &amp;quot;*&amp;quot;
  github = &amp;quot;*&amp;quot;
  stackoverflow = &amp;quot;*&amp;quot;
  linkedin = &amp;quot;*&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While this setup is very convenient for sites that are included with the default theme, it makes it slightly more difficult to add custom themes. However, it is certainly not impossible! First, let’s take a look at the HTML partial for the social links. This can be found at &lt;code&gt;themes/blackburn/layours/partials/social.html&lt;/code&gt;. This HTML file is arranged in the order that the social links will appear if they are included in the config file. Here is an example of a few of the built in blocks within this file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- Twitter --&amp;gt;
{{ with .Site.Social.twitter }}
&amp;lt;li class=&amp;quot;pure-menu-item&amp;quot;&amp;gt;
  &amp;lt;a class=&amp;quot;pure-menu-link&amp;quot; href=&amp;quot;https://twitter.com/{{ . }}&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;i class=&amp;quot;fa fa-twitter-square fa-fw&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;Twitter&amp;lt;/a&amp;gt;
&amp;lt;/li&amp;gt;
{{ end }}

&amp;lt;!-- Github --&amp;gt;
{{ with .Site.Social.github }}
&amp;lt;li class=&amp;quot;pure-menu-item&amp;quot;&amp;gt;
  &amp;lt;a class=&amp;quot;pure-menu-link&amp;quot; href=&amp;quot;https://github.com/{{ . }}&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;i class=&amp;quot;fa fa-github-square fa-fw&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;GitHub&amp;lt;/a&amp;gt;
&amp;lt;/li&amp;gt;
{{ end }}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As we can see, it follows a pretty standard format. We can create our own custom social for RStudio Community like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- RStudio Community --&amp;gt;
{{ with .Site.Social.rstudiocommunity }}
&amp;lt;li class=&amp;quot;pure-menu-item&amp;quot;&amp;gt;
  &amp;lt;a class=&amp;quot;pure-menu-link&amp;quot; href=&amp;quot;https://community.rstudio.com/u/{{ . }}&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;img src = &amp;quot;/images/community-icon.png&amp;quot; id = &amp;quot;community-icon&amp;quot;&amp;gt;RStudio Community&amp;lt;/a&amp;gt;
&amp;lt;/li&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are a few important changes that are worth noting here. First, we created a name for the social link that will used in the config file by changing the content of the first line to &lt;code&gt;.Site.Social.rstudiocommunity&lt;/code&gt;. Then we changed the &lt;code&gt;href&lt;/code&gt; link to the base url for an RStudio Community user with the partial syntax that will input the value from the config file - &lt;code&gt;&amp;quot;https://community.rstudio.com/u/{{ . }}&amp;quot;&lt;/code&gt;. We also had to change the text for the link to “RStudio Community”. Finally, we had to insert the image that we created in the first section of this post! That is done with this piece of code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;img src = &amp;quot;/images/community-icon.png&amp;quot; id = &amp;quot;community-icon&amp;quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The leading &lt;code&gt;/&lt;/code&gt; is important because it tells the site that it should always be looking for &lt;code&gt;images/&lt;/code&gt; folder in the base directory and not in an individual page directory. This is the same way you would reference an image from inside of a blog post! We also can add an id for our image so that we can add some custom styling to it (which we will cover next).&lt;/p&gt;
&lt;p&gt;Now we can go back to our &lt;code&gt;config.toml&lt;/code&gt; file and add a new line for our RStudio Community account! Now the social section will look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[social]
  twitter = &amp;quot;*&amp;quot;
  github = &amp;quot;*&amp;quot;
  stackoverflow = &amp;quot;*&amp;quot;
  linkedin = &amp;quot;*&amp;quot;
  rstudiocommunity = &amp;quot;*&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;customize-css&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Customize CSS&lt;/h1&gt;
&lt;p&gt;Now if you re render your site, you will see that your RStudio Community tag is included in your sidebar menu! Unfortunately, since the link has a long name, it doesn’t fit perfectly with the default width of the blackburn’s side bar menu. Luckily, all this takes is a little manipulation of the sites CSS, more specifically, the &lt;code&gt;themes/blackburn/static/css/side-menu.css&lt;/code&gt; file. I am not going to copy and paste the whole file here, but I will include all of the blocks (and their line numbers) that I modified. If you are customizing for a different theme or social link, I would recommend using the developer tools in your browser to interactively play with different CSS inputs.&lt;/p&gt;
&lt;p&gt;Here are the blocks that were changed:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* 
Increase menu size from 150px to 175px
lines 31-38
*/
#layout.active #menu {
    left: 175px;
    width: 175px;
}

#layout.active .menu-link {
    left: 175px;
}


/* 
Increase padding between content and side menu and 
increase the max width of content
Also increase the padding between the header and side 
bar menu
lines 42-56
*/
.content {
    margin: 0 auto;
    padding: 0 2.5em;
    max-width: 1200px;
    margin-bottom: 50px;
    line-height: 1.6em;
}

.header {
     margin: 0;
     color: #333;
     text-align: center;
     padding: 2.5em 2.5em 0;
     border-bottom: 1px solid #eee;
 }
 
 
/* 
Again, increasing menu width from 150px to 175px
lines 82-93
*/
#menu {
  margin-left: -175px; /* &amp;quot;#menu&amp;quot; width */
  width: 175px;
  position: fixed;
  top: 0;
  left: 0;
  bottom: 0;
  z-index: 1000; /* so the menu or its navicon stays above all content */
  background: #191818;
  overflow-y: auto;
  -webkit-overflow-scrolling: touch;
}

/* 
Edit the responsive styles so that when the screen is small or large 
menu looks right. In here we alter the menu widths from 150 to 175 and 
the left padding from 2 to 2.5 for .header and .content
*/
@media (min-width: 48em) {

    .header,
    .content {
        padding-left: 2.5em;
        padding-right: 2em;
    }

    #layout {
        padding-left: 175px; /* left col width &amp;quot;#menu&amp;quot; */
        left: 0;
    }
    #menu {
        left: 175px;
    }

    .menu-link {
        position: fixed;
        left: 175px;
        display: none;
    }

    #layout.active .menu-link {
        left: 175px;
    }
}

@media (max-width: 48em) {
    /* Only apply this when the window is small. Otherwise, the following
    case results in extra padding on the left:
        * Make the window small.
        * Tap the menu to trigger the active state.
        * Make the window large again.
    */
    #layout.active {
        position: relative;
        left: 175px;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we can add some custom styling for our community icon! This can be placed anywhere in this &lt;code&gt;side-menu.css&lt;/code&gt; file and looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#community-icon {
  padding-left:3px;
  margin-right:0.4em;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our final product looks like this&lt;/p&gt;
&lt;center&gt;
&lt;img src=&#34;/images/sidebar-menu-example.png&#34; /&gt;
&lt;/center&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This post demonstrates how to add an RStudio Community (or any site really) social link to the provided links in the Blackburn theme. While this is specific to the Blackburn theme, a lot of Hugo themes use HTML partials to include things from the &lt;code&gt;config.toml&lt;/code&gt; file and this example could likely be extended to other themes after exploring the different files provided in a given themes &lt;code&gt;layout&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;I hope you consider using &lt;a href=&#34;http://community.rstudio.com&#34;&gt;RStudio Community&lt;/a&gt; for all of your R, RStudio, Shiny, and tidyverse related questions! In addition, adding a link to your blog page will help increase awareness of the site!&lt;/p&gt;
&lt;/div&gt;
</description>
  </item>
  
<item>
  <title>About</title>
  <link>/about/</link>
  <pubDate>Tue, 21 Aug 2018 00:00:00 +0000</pubDate>
  
<guid>/about/</guid>
  <description>&lt;p&gt;&lt;img src=&#34;/images/headshot-tyler-bradley-small.png&#34;, align = &#34;right&#34;/&gt;&lt;/p&gt;

&lt;p&gt;My Name is Tyler Bradley and I am an Environmental Engineer for the Philadelphia Water Department. I work mostly with drinking water distribution system water quality data. Most of my day to day work is focused on data science. Some of my responsibilites include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Manage and maintain an Ubuntu server used to host &lt;a href=&#34;https://www.rstudio.com/products/connect/&#34;&gt;RStudio Connect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create and maintain an internal R package used to connect to and query data from multiple internal databases. The functions used to query data allow for quick and structured queries to be run against these databases programmatically. This package also contains several functions to be used in accordance with the data that is queried from the databases.&lt;/li&gt;
&lt;li&gt;Develop and maintain a PostgreSQL database&lt;/li&gt;
&lt;li&gt;Develop and deploy shiny apps and dashboards that allow for quick access to water quality data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am a PhD student at Drexel University studying Environmental Engineering, more specifically using data science to solve distribution system water quality issues. Some of my specific reseach interests include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nitrification in drinking water distribution systems&lt;/li&gt;
&lt;li&gt;Drinking water distribution system microbiome and its impact on things such as nitrification&lt;/li&gt;
&lt;li&gt;Using data science to evaluate drinking water quality&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am huge fan of R and the tidyverse and all that it includes. Currently, I am a sustainer/moderator on the &lt;a href=&#34;http://community.rstudio.com/&#34;&gt;RStudio Community&lt;/a&gt; discourse site.&lt;/p&gt;

&lt;p&gt;Last, but certainly not least, I am a huge Arsenal fan (aka gooner, hence the name of the blog)!&lt;/p&gt;

&lt;p&gt;Please feel free to follow me on  &lt;a href=&#34;https://twitter.com/tycbrad&#34;&gt;twitter&lt;/a&gt; and connect with me on &lt;a href=&#34;https://www.linkedin.com/in/tyler-bradley-68707292/&#34;&gt;LinkedIn&lt;/a&gt;. Please check out my blog posts on &lt;a href=&#34;https://www.r-bloggers.com/&#34;&gt;R-Bloggers&lt;/a&gt; along with tons of other great R related blogs.&lt;/p&gt;

&lt;p&gt;This website was built with the &lt;a href=&#34;https://github.com/rstudio/blogdown&#34;&gt;blogdown&lt;/a&gt; R package.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;iframe src=&#34;https://giphy.com/embed/z2pppDya3mrXa&#34; width=&#34;480&#34; height=&#34;270&#34; frameBorder=&#34;0&#34; class=&#34;giphy-embed&#34; allowFullScreen&gt;&lt;/iframe&gt;&lt;p&gt;&lt;a href=&#34;https://giphy.com/gifs/arsenal-football-club-dennis-bergkamp-z2pppDya3mrXa&#34;&gt;Enjoy this classic goal!&lt;/a&gt;&lt;/p&gt;
&lt;/center&gt;&lt;/p&gt;
</description>
  </item>
  
</channel>
  </rss>